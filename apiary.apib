FORMAT: X-1A
HOST: https://api.sparkpost.com/api/v1

# SparkPost API v1
There are two service types available:  [SparkPost](http://sparkpost.com/), our self-service product, and [SparkPost Elite](https://www.sparkpost.com/products/sparkpost-elite), a managed service with guaranteed burst rates and white-glove support. These services have shared and unique aspects, with those unique aspects indicated in our consolidated API documentation as follows:
* Features specific to **SparkPost** are indicated as "SparkPost only".
* Features specific to **SparkPost Elite** products are indicated by "SparkPost Elite only".

## API Endpoints
* JSON is the basis for its request input and response format.
* SparkPost and SparkPost Elite listen on port 443, so no explicit port number is required.

### SparkPost API Endpoint
**https\://api.sparkpost.com/api/v1**

### SparkPost Elite API Endpoint
**https\://yourdomain.msyscloud.com/api/v1**


## API Conventions
* API versioning is handled using a major version number in the URL, e.g. /api/v1/endpoint.
* /something is equivalent to /something/.
* URL paths, URL query parameter names, JSON field names, and XML element names are case sensitive.
* URL paths use lower case, with dashes separating words.
* Query parameters and JSON fields use lower case, with underscores separating words.
* The HTTP status indicates whether an operation failed or succeeded, with extra information included in the HTTP response body.
* All APIs return standard error code formats.
* Unexpected query parameters are ignored.
* Unexpected JSON fields or XML elements in the request body are ignored.
* The JSON number type is bounded to a signed 32-bit integer.

## Authentication
* All API's require that you authenticate with every request.
* To authenticate with the various API's, specify the "Authorization" header with each request. The value of the "Authorization" header must be a valid API key or conform to the standard for Basic authentication.
* Administrators can generate an API key using the UI. Please take care to record and safeguard your API keys at all times. You cannot retrieve an API key after it has been created.
* For examples of supplying the Authorization header, refer to the cURL example below or any of the individual API request examples.

## Using cURL
If you are using cURL to call the API, you must include the resource URI in quotes when you pass in multiple query parameters separated by an **&**.

For example:

```
curl -v \
-H "Content-Type: application/json" \
-H "Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf" \
-X GET "https://api.sparkpost.com/api/v1/metrics/deliverability/aggregate?campaigns=testjob&from=2014-01-23T14:00&metrics=count_targeted,count_sent,count_accepted&protocols=smtp&timezone=America%2FNew_York&to=2014-06-23T15:50"
```

or 

```
curl -v \
-H "Content-Type: application/json" \
-u <APIKey>: \
-X GET "https://api.sparkpost.com/api/v1/metrics/deliverability/aggregate?campaigns=testjob&from=2014-01-23T14:00&metrics=count_targeted,count_sent,count_accepted&protocols=smtp&timezone=America%2FNew_York&to=2014-06-23T15:50"
```

## SMTP Relay Endpoints

### SparkPost SMTP Endpoint
To use SparkPost as an SMTP relay you need to point your SMTP client (or local MTA) to the following endpoint:

* Host: smtp.sparkpostmail.com
* Port: 587
* Encryption: STARTTLS
* Authentication: AUTH LOGIN
* User: SMTP_Injection
* Password: Any API key with Send via SMTP permission

### SparkPost Elite SMTP Endpoint

* Please contact your Technical Account Manager for details on your SMTP endpoint.  

The SMTP relay optionally supports advanced API features using the [SMTP API](#smtp-api).  To create an API key, login to your SparkPost [Account Credentials](https://app.sparkpost.com/account/credentials) page.

## Substitutions Reference

### Key Features

* Substitutions applied in top-level headers, text/plain, and text/html parts
* Key/value substitutions using substitution data provided in an arbitrary JSON object format
* Conditional statements such as if, then, else, elseif
* Looping over JSON arrays using each
* Execution of built-in macros
* Support for default values provided as a backup for substitution data that does not exist
* Automatic HTML escaping of substitution values appearing in HTML parts of content
* Automatic encoding of UTF-8 substitution values appearing in email headers

### Substitution Data

Substitutions are applied per recipient using substitution data provided as part of
the transmission and recipient JSON structures.  In the simplest case, substitution data is a JSON
object of key/value pairs of recipient-specific data.  In a more complex case,
the substitution data can consist of nested JSON objects and even arrays of objects.
This allows the template writer to write statements that loop over an array of JSON objects
and substitute values that exist in each object in the array, for example, an array of customer orders.

The following is a simple example of JSON substitution data:

```
{
  "name" : "Clark",
  "age" : 40,
  "state" : "MD",
  "is_member" : true
}
```

See the examples in the following sections for more complex substitution data structures.

**UTF-8 support**: UTF-8 substitution *values* are supported, but UTF-8 substitution *keys* are not supported.

Substitution keys can be composed of any string of US-ASCII letters,
digits, and underscores, not beginning
with a digit, with the exception of the following keywords:

* and, break, do, else, elseif
* end, false, for, function, if
* in, local, nil ,not, or ,each
* repeat, return, then, true, until, while

**Metadata**: Transmissions and recipients also support a "metadata" JSON object.
Metadata can be used in substitutions in the same way as substitution data.




### Template Start and End Markers

As with some other templating languages, the start and end markers are defined as double curly braces.  For example:

```
{{value}}
```

Whitespace within the braces is ignored.  All of the following are equivalent:

```
{{ value }}
{{value}}
{{  value   }}
```

However, no spaces are allowed when substitution data is used in a query string.
In the following example, no whitespace is allowed within the braces:

```
<a href="https://company.com/dailydeals?user={{user}}&offercode={{offercode}}">
Check out the amazing offers for today ONLY!
</a>
```

In all cases, the two braces must be adjacent, and there can be no space between them.
The following will not be interpreted as a template:

```
{ { value } }
```

### Determination of Expressions and Statements

When compiling a template, the substitution engine looks at the text between each pair of curly braces
and determines whether it should be treated as an expression or a statement.  The
difference being, expressions return a value, and statements do not return a value.
However, there is no need to use a different syntax when writing an expression
(as is done in some templating languages).

Expressions return values that are inserted into the template content.  The following are examples:

```
{{ name }}
{{ age }}
{{ airports[code].city }}
{{ name or 'Customer' }}
```
 
Statements do not return a value but implement logic using keywords such as if, else, not, end,
each.  The following are examples:

```
{{ if name == "Clark" }}
{{ if empty(myarray) }}
{{ each orders }}
{{ end }}
```

### Missing Substitution Values

An empty string is substituted for keys that do not appear in the substitution
data or are present in the substitution data but have a value of JSON null.

When `name` does not exist, the following example will render as **Hello []**. 

```
Hello [{{ name }}]
```

When `name` is null, the following expression resolves to **You don't have a name!**: 

```
{{ if name }}
Your name is {{name}}
{{ else }}
You don't have a name!
{{ end }}
```

When the orders array is null, nothing is rendered in the following example:

```
{{ each orders }}
Price is {{loop_var}}
{{ end }}
```

### Statements on Their Own Line
Substitution statements that exist on their own line of the template will **not**
produce a blank line in the resulting output.  This is a convenience to the
template writer.  In addition, any whitespace after the closing **}}** and before
the `LF` or `CRLF` will **not** be present in the output. 

These rules do not apply to substitution expressions.

In the following example, the template will render without blank lines: 

```
Start of template
{{ if state == "MD" }}
Maryland
{{ end }}
End of template
```

Yielding the output:

```
Start of template
Maryland
End of template
```

### Escaping Start and End Tags

If you want a pair of opening or closing braces to appear in the content,
you must escape them.  Use one of the following macros:

* `opening_double_curly()`
* `closing_double_curly()`
* `opening_triple_curly()`
* `closing_triple_curly()`

For example:

```
Here is a curly: {{ opening_double_curly() }}
```

will yield:

```
Here is a curly: {{
```

### Escaping HTML Values

The substitution engine automatically HTML escapes substitution values before they are
inserted into the HTML part of the content.  Substitution values inserted into
plain text portions of content are not HTML escaped.  In order to prevent
HTML escaping, use triple curly braces.

### Preventing HTML Escaping

The substitution engine supports triple curly braces to signify that HTML escaping should not occur.

Example substitution data: 

```
{
  "custom_html": "<p>Hello</p>"
}
```

Example template HTML part:

```
<body>
{{{ custom_html }}}
</body>
```

Example of the resulting rendered HTML:

```
<body>
<p>Hello</p>
</body>
```

Example of using double curly braces renders angle brackets incorrectly:

```
<body>
&lt;p&gt;Hello&lt;/p&gt;
</body>
```

### Personalized Links

Personalized links are supported.  A personalized link is defined as a target link that has one or more substitutions.
For example:

```
<a href="https://company.com/dailydeals?user={{user}}&offercode={{offercode}}">Go!</a>
```

In this case `{{user}}` and `{{offercode}}` are the items taken from the substitution data or metadata. 

The substitution engine automatically URL encodes substitution values before they are
inserted into URLs.  For example, if 'user' and 'offercode' are defined in the substitution_data as

```
{
  "user" : "Spark Post",
  "offercode" : "ABC/ZYZ"
}
```

Then the above URL will be correctly rendered as
```
<a href="https://company.com/dailydeals?user=Spark%20Post&offercode=ABC%2FZYZ">Go!</a>
```

In order to disable URL encoding, use triple curly braces.  This is useful if you
have an entire URL suffix which needs to be substituted.  For example:

```
<a href="http://www.company.com/{{{the_entire_suffix}}}">Go</a>
```

where the substitution_data looks like:

```
{
  "the_entire_suffix" : "groups/join?user=clark"
}
```

Since triple curlies are used, the substitution value will *not* be URL encoded
and the URL will render as expected:

```
<a href="http://www.company.com/groups/join?user=clark">Go</a>
```

Triple curlies are also necessary if the entire URL resides in substitution data:

```
{
  "the_entire_url" : "http://www.company.com/dailydeals?user=foo&offercode=bar"
}
```

This URL can be inserted into the template using triple curlies:

```
<a href="{{{the_entire_url}}}">Go!</a>
```

### Link Names

Name all links using the **data-msys-linkname** custom attribute.  The link name has a maximum length of 63 characters and is truncated if it exceeds that limit. For example:

```
<a href="http://www.example.com" data-msys-linkname="banner">Example</a>
```

If this attribute is not specified, the link name will fall back to **Raw URL**.

The link name will be incorporated into the click-tracked link and will be tracked in engagement events.

### Substitutions Syntax Examples

This section contains syntax examples based on the following JSON substitution data:

```
{
  "name": "Clark Griswold",
  "address": {
    "street": "Hemlock",
    "number": "203A",
    "city": "Chicago",
    "state": "IL"
  },
  "age": 40,
  "signed_up": true,
  "rejected_sign_up": false,
  "children": [
    "Rusty",
    "Audrey"
  ],
  "shopping_cart": [
    {
      "item_name": "Jacket",
      "price": 39.99,
      "a_nested_array": [
        {
          "key": "v2"
        },
        {
          "key": "v1"
        }
      ]
    },
    {
      "item_name": "Gloves",
      "price": 5.00
    }
  ]
}
```

#### Basic Substitution

```
Hello {{name}}
```

#### Referencing a Nested Object

```
Street: {{address.street}}
```

#### if then else Syntax

Notice the "then" is not required.  The following are equivalent: 

```
{{if signed_up}}
Welcome
{{else}}
Don't forget to sign up!
{{end}}

{{if signed_up then}}
Welcome
{{else}}
Don't forget to sign up!
{{end}}
```

#### if not Syntax

```
{{if not signed_up}}
Don't forget to sign up!
{{end}}
```

#### elseif Syntax

```
{{if signed_up}}
Welcome
{{elseif rejected_sign_up}}
We won't bug you
{{else}}
Please sign up
{{end}}
```

#### Expressions in Conditionals (`==`, `!=`, `<`, `>`, `and`, `or`)

```
{{if age > 30}}
do something
{{else}}
do something else
{{end}}

{{if address.state == "MD"}}
do something
{{end}}

-- multi part conditionals
{{if age > 30 and address.state == "MD"}}
do something
{{end}}
```

### Relational and Logical Operators

The relational and logical operators are as follows: 

**Relational Operators**

| Expression | Description |
| ---------- |-------------|
| x == y | x is equal to y |
| x != y | x is not equal to y |
| x < y | x is less than y |
| x > y | x is greater than y |
| x <= y | x is less than or equal to y |
| x >= y | x is greater than or equal to y |

**Logical Operators**

| Expression |
| ------------- |
| and |
| or |
| not |

### Array Iteration

The substitution language uses the `each` keyword for iteration.
The value at each index of an array can be accessed within the each loop by using the `loop_var` variable. When using the `each` keyword to iterate over an array, the `loop_index` variable can be used to get the current index.

These examples continue to use the sample data given above.

For example, use the following syntax to iterate over a JSON array of strings
(children) and print out the value of each string:

```
{{ each children }}
You have a child named {{loop_var}}
{{ end }}
```

To iterate over an array of objects, the syntax is the same,
but access to the nested fields of the object is done using dot notation:

```
Your shopping cart has items in it:

{{each shopping_cart}}
Item: {{loop_var.item_name}}, Price: {{loop_var.item_price}}
{{end}}
```

Nested loops are possible.  When nested loops are in use, loop variables must
be accessed using `loop_vars.<name of the array>` (notice it is plural `loop_vars` and not `loop_var`).
The following example uses `shopping_cart` and `a_nested_array`: 

```
{{each shopping_cart}}
  Item: {{loop_vars.shopping_cart.item_name}}, Price: {{loop_vars.shopping_cart.item_price}}
  This item has the following nested values:
  {{each loop_vars.shopping_cart.a_nested_array}}
    Nested value: {{loop_vars.a_nested_array.key}}
  {{end}}
{{end}}
```

The preceding example uses indentation for ease of reading.
The indentation will appear in the rendered content, so it is not advisable to indent a production template. 

### Links and Substitution Expressions Within Substitution Values

Sometimes it may be convenient to place links and substitution expressions not only within
a template, but within substitution values themselves.  For example, the 'my_html_chunk' substitution value
below contains a link as well as a substitution expression referencing a username:

```

{
  "substitution_data" : {
    "my_html_chunk" : "<p><a href = \"http://www.example.com?q={{username}}\">Click here</a></p>",
    "username" : "foo"
  }
}
```

By default, this will not work. In general, the rules are as follows:

* Links within substitution values are *not* automatically converted to click trackable links.
* Substitution expressions within substitution values are *not* automatically executed.

Using the above substitution_data and the following template:

```
<body>
<p>Attempting to insert a chunk of html:</p>
{{{ my_html_chunk }}}
</body>
```

Will result in the following unexpected rendered content:

```
<body>
<p>Attempting to insert a chunk of html:</p>
<p><a href = "http://www.example.com?q={{username}}">Click here</a></p>
</body>
```

Notice that the **username** variable was not replaced
and the link was not converted into a click trackable form.

In order to correct this problem, the system must be informed of the need to perform such
substitutions and link tracking.  This can be accomplished with two steps:

1) The html chunk must be specified in the transmission level substitution data underneath a special
`dynamic_html` json object.  All key value pairs underneath dynamic_html will undergo substitutions as well
as link tracking.

In the above example, the transmission level substitution data would need to be structured as:

```
{
  "substitution_data" : {
    "dynamic_html" : {
      "my_html_chunk" : "<p><a href = \"http://www.example.com?q={{username}}\">Click here</a></p>"
    }
  }
}
```

2) The render_dynamic_content() macro must be used to wrap all uses of dynamic_html variables.
Continuing with the example above, the template would
need to be structured as:

```
<body>
<p>Attempting to insert a chunk of html:</p>
{{ render_dynamic_content(dynamic_html.my_html_chunk) }}
</body>
```

The dynamic content will be correctly inserted *without* html escaping,
regardless of whether double or triple curly braces are used.  There is no need to use triple curly braces in this case.


To insert dynamic content into the text/plain part of a message, one must place the dynamic content into the transmission
level substitution variable `dynamic_plain`.  For example:

```
{
  "substitution_data" : {
    "dynamic_plain" : {
      "my_plain_text_chunk" : "A chunk of plain text content with a link and a substitution. http://www.example.com?q={{username}}"
    }
  }
}
```

As with dynamic_html, dynamic_plain variables must be wrapped in the render_dynamic_content() macro when used
in the template:

```
Attempting to insert a chunk of plain text:
{{ render_dynamic_content(dynamic_plain.my_plain_text_chunk) }}
```

Finally, as a more realistic example, render_dynamic_content can also be used inside an 'each' loop. Full transmission json examples follow.

**Note:** The following example applies to SparkPost only.

```
{
  "recipients": [
    {
      "address": {
        "email": "foo@example.com"
      },
      "substitution_data": {
        "name": "The A-Team",
        "offers": [ "offer2", "offer1" ]
      }
    },
    {
      "address": {
        "email": "bar@example.com"
      },
      "substitution_data": {
        "name": "Johnnie Rico",
        "offers": [ "offer3" ]
      }
    }
  ],
  "substitution_data": {
    "dynamic_html": {
      "offer1": "<a href=\"http://t.com/offer/1?name={{name}}\">Premium-brand wirecutters</a>",
      "offer2": "<a href=\"http://t.com/offer/2?name={{name}}\">Corks</a>",
      "offer3": "<a href=\"http://t.com/offer/3?name={{name}}\">Super-effective bug spray</a>"
    },
    "dynamic_plain": {
      "offer1": "Premium-brand wirecutters -- http://t.com/offer/1?name={{name}}",
      "offer2": "Corks -- http://t.com/offer/2?name={{name}}",
      "offer3": "Super-effective bug spray -- http://t.com/offer/3?name={{name}}"
    }
  }
  "content": {
    "text": "Today's special offers:\n\n{{each offers}}\n* {{render_dynamic_content(dynamic_plain[loop_var])}}\n{{end}}\n",
    "html": "<p>Today's special offers</p><ul>\n{{each offers}}\n<li>{{render_dynamic_content(dynamic_html[loop_var])}}</li>\n{{end}}\n</ul>",
    "from": "test@example.com",
    "subject": "offers"
  }
}
```

**Note:** The following example applies to SparkPost Elite only.

```
{
  "recipients": [
    {
      "address": {
        "email": "foo@example.com"
      },
      "substitution_data": {
        "name": "The A-Team",
        "offers": [ "offer2", "offer1" ]
      }
    },
    {
      "address": {
        "email": "bar@example.com"
      },
      "substitution_data": {
        "name": "Johnnie Rico",
        "offers": [ "offer3" ]
      }
    }
  ],
  "substitution_data": {
    "dynamic_html": {
      "offer1": "<a href=\"http://t.com/offer/1?name={{name}}\">Premium-brand wirecutters</a>",
      "offer2": "<a href=\"http://t.com/offer/2?name={{name}}\">Corks</a>",
      "offer3": "<a href=\"http://t.com/offer/3?name={{name}}\">Super-effective bug spray</a>"
    },
    "dynamic_plain": {
      "offer1": "Premium-brand wirecutters -- http://t.com/offer/1?name={{name}}",
      "offer2": "Corks -- http://t.com/offer/2?name={{name}}",
      "offer3": "Super-effective bug spray -- http://t.com/offer/3?name={{name}}"
    }
  }
  "content": {
    "text": "Today's special offers:\n\n{{each offers}}\n* {{render_dynamic_content(dynamic_plain[loop_var])}}\n{{end}}\n",
    "html": "<p>Today's special offers</p><ul>\n{{each offers}}\n<li>{{render_dynamic_content(dynamic_html[loop_var])}}</li>\n{{end}}\n</ul>",
    "from": "test@example.com",
    "subject": "offers"
  },
  "return_path": "test@example.com"
}
```

### Default Values

To create default values, use `or` syntax.  In the following example,
if `name` does not exist as a substitution key, then the expression `null or 'Customer'`
will evaluate as `Customer`.

```
Hello {{ name or 'Customer' }}
```

### Macros

Macros are function calls that may or may not take arguments.  The currently available macros are:

**empty**

This function takes a JSON array as an argument and returns true if the array is empty or false if the array is not empty.
This is useful for determining whether to include a header in a dynamically
generated HTML table and blocking iteration of the table if it is empty.

Example:

```
{{ if not empty(shopping_cart) }}
<table border = "1">
<tr>
<th>Name</th>
<th>Price</th>
</tr>
{{ each shopping_cart }}
<tr>
<td>{{loop_var.item_name}}</td>
<td>${{loop_var.item_price}}</td>
</tr>
{{ end }}
</table>
{{ else }}
<b>Buy something!</b>
{{ end }}
```

**Braces Macros**

The four macros for outputting braces are listed below followed by their output:

* `opening_double_curly()` - {{
* `closing_double_curly()` - }}
* `opening_triple_curly()` - {{{
* `closing_triple_curly()` - }}}



###  Reserved Recipient Substitution Variables

The following substitution variables are reserved and automatically available for each recipient:

* `address.name`: Recipient's name from the _address.name_ recipient json field
* `email` and `address.email`: Recipient's email address from the _address_ or _address.email_ recipient json field
* `return_path`: Return path from the transmission or recipients json field ( **Note:** SparkPost Elite only )

**Note:** The following example applies to SparkPost only.

```
Hello {{address.name}}
Your email is {{address.email}}
```

**Note:** The following example applies to SparkPost Elite only.

```
Hello {{address.name}}
Your email is {{address.email}} and your return path is {{return_path}}
```

### Substitutions in email_rfc822 Headers

When it is desirable to have substitutions in RFC2047 encoded headers which are folded, be sure that
each line of the header is separately RFC2047 encoded.  Otherwise, the server will not be able to decode
the header to look for substitution syntax.

**Correct:**

```
Subject: =?gb2312?B?ztLE3M3Mz8Kyo8Gntviyu8nLye3M5c7SxNzNzM/CsqPBp7b4srvJy8ntzOU=?=
   =?gb2312?B?ztLE3M3Mz8Kyo8Gntvg=?= 
```

**Incorrect:**

```
Subject: =?gb2312?B?ztLE3M3Mz8Kyo8Gntviyu8nLye3M5c7SxNzNzM/CsqPBp7b4srvJy8ntzOU=
   ztLE3M3Mz8Kyo8Gntvg=?=
```

### Encoding Rules

* If after substitution, a text/plain or text/html part contains 8-bit data,
then that part will be quoted-printable encoded before being placed back into the
MIME structure.  The Content-Type will be updated appropriately.
* If after substitution, a header value contains 8-bit data, then the header
value will be RFC2047 base64 encoded before being written back to the headers structure.

# Group Metrics

SparkPost and SparkPost Elite log copious amounts of statistical, real-time data about message processing, message
disposition, and campaign performance.  This reporting data is available in the UI or through the Metrics API.  The Metrics API provides a variety of endpoints enabling you to retrieve a summary of the data, data grouped by a specific qualifier, or data by event type.  Within each endpoint, you can also apply various filters to drill down to the data for your specific reporting needs.

## Metrics API Deliverability Glossary

Definitions for terms found in Metrics API

| Term     | Definition    |
|---------:|:--------------|
|`count_targeted` | Messages successfully injected into SparkPost and SparkPost Elite as well as rejected by it|
|`count_injected` | Messages injected to or received by SparkPost and SparkPost Elite|
|`count_sent` | Messages that SparkPost and SparkPost Elite attempted to deliver, which includes both Deliveries and In-Band Bounces|
|`count_accepted` | Messages an ISP or other remote domain accepted (less Out-of-Band Bounces)|
|`count_delivered_first` | Messages delivered on the first attempt|
|`count_delivered_subsequent` | Messages delivered that required more than one delivery attempt|
|`count_rendered` | Total renderings of a message|
|`count_unique_rendered` | Total number of messages that were rendered at least once|
|`count_unique_confirmed_opened` | Total number of messages that were rendered or had at least one link selected|
|`count_clicked` | Total number of times that links were selected across all messages|
|`count_unique_clicked` | Total number of messages which had at least one link selected one or more times|
|`count_bounce` | Total number of bounced messages, which includes both In-Band and Out-of-Band bounces|
|`count_hard_bounce` | Total number of Bounced messages due to hard bounce classification reasons|
|`count_soft_bounce` | Total number of Bounced messages due to soft bounce classification reasons|
|`count_block_bounce` | Total number of Bounced messages due to an IP block|
|`count_admin_bounce` | Total number of Bounced messages due to admin bounce classification reasons, also includes Rejected|
|`count_undetermined_bounce` | Total number of Bounced messages due to undetermined bounce reasons|
|`count_rejected` | Messages rejected due to policy or that failed to generate|
|`count_policy_rejection` | Messages rejected by SparkPost and SparkPost Elite due to policy|
|`count_generation_failed` | Message generation failed for an intended recipient|
|`count_generation_rejection` | Messages rejected by SparkPost and SparkPost Elite due to policy|
|`count_inband_bounce` | Messages that bounced on delivery attempt during the SMTP session|
|`count_outofband_bounce` | Messages that the ISP bounced subsequent to a successful delivery|
|`count_delayed` | Total number of delays due to any temporary failure|
|`count_delayed_first` | Messages delayed on the first delivery attempt|
|`total_msg_volume` | Total size of delivered messages, in bytes (including attachments)|
|`count_spam_complaint` | Number of spam complaints received from an ISP|

## Discoverability Links [/metrics/]

The Metrics API is designed for discoverability of child links.  Calling the API root displays a
list of URIs that exists within the Metrics API.

+ Model (application/json)

    + Body

        ```
        {
            "results": {},
            "links": [
                {
                   "href": "/api/v1/metrics/",
                   "rel": "",
                   "method": "GET"
                },
                {
                  "href": "/api/v1/metrics/campaigns",
                  "rel": "campaigns",
                  "method": "GET"
                },
                {
                  "href": "/api/v1/metrics/deliverability",
                  "rel": "deliverability",
                  "method": "GET"
                },
                {
                  "href": "/api/v1/metrics/domains",
                  "rel": "domains",
                  "method": "GET"
                },
                {
                  "href": "/api/v1/metrics/binding-groups",
                  "rel": "binding-groups",
                  "method": "GET"
                },
                {
                  "href": "/api/v1/metrics/bindings",
                  "rel": "bindings",
                  "method": "GET"
                },
                {
                  "href": "/api/v1/metrics/nodes",
                  "rel": "nodes",
                  "method": "GET"
                },
                {
                  "href": "/api/v1/metrics/protocols",
                  "rel": "protocols",
                  "method": "GET"
                }
            ]
        }
        ```

    + Schema

        ```
        {
            "type":"object",
            "$schema": "http://json-schema.org/draft-03/schema",
            "required":false,
            "properties":{
                "links": {
                    "type":"array",
                    "required":false,
                    "items":
                        {
                            "type":"object",
                            "required":false,
                            "properties":{
                                "href": {
                                    "type":"string",
                                    "required":false
                                },
                                "method": {
                                    "type":"string",
                                    "required":false
                                },
                                "rel": {
                                    "type":"string",
                                    "required":false
                                }
                            }
                        }
                },
                "results": {
                    "type":"object",
                    "required":false
                }
            }
        }
        ```

### Metrics Discoverability Links [GET]

Provides links to all child URIs within the Metrics API.

**Note:** Links in the response for binding-groups, bindings, nodes, and protocols apply to SparkPost Elite only.

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200

    [Discoverability Links][]


## Deliverability Metrics [/metrics/deliverability{?from,to,domains,campaigns,templates,nodes,bindings,binding_groups,protocols,metrics,timezone}]


+ Model

    + Body

        ```
        {
          "results": [
            {
              "count_targeted": 34432,
              "count_injected": 32323,
              "count_rejected": 2343,
              "count_sent": 34344
            }
          ],
        "links": [
            {
                "href": "/api/v1/metrics/deliverability",
                "rel": "deliverability",
                "method": "GET"
            }
          ]
        }
        ```

    + Schema

        ```
        {
          "type":"object",
          "$schema": "http://json-schema.org/draft-03/schema",
          "required":false,
          "properties":{
            "links": {
              "type":"array",
              "required":false,
              "items":
                {
                  "type":"object",
                  "required":false,
                  "properties":{
                    "href": {
                      "type":"string",
                      "required":false
                    },
                    "method": {
                      "type":"string",
                      "required":false
                    },
                    "rel": {
                      "type":"string",
                      "required":false
                    }
                  }
                }
            },
            "results": {
              "type":"array",
              "required":false,
              "items":
                {
                  "type":"object",
                  "required":false,
                  "properties":{
                    "count_accepted": {
                      "type":"number",
                      "required":false
                    },
                    "count_admin_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_block_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_clicked": {
                      "type":"number",
                      "required":false
                    },
                    "count_delayed_first": {
                      "type":"number",
                      "required":false
                    },
                    "count_delayed": {
                      "type":"number",
                      "required":false
                    },
                    "count_delivered_first": {
                      "type":"number",
                      "required":false
                    },
                    "count_delivered_subsequent": {
                      "type":"number",
                      "required":false
                    },
                    "count_delivered": {
                      "type":"number",
                      "required":false
                    },
                    "count_generation_failed": {
                      "type":"number",
                      "required":false
                    },
                    "count_generation_rejection": {
                      "type":"number",
                      "required":false
                    },
                    "count_hard_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_inband_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_injected": {
                      "type":"number",
                      "required":false
                    },
                    "count_outofband_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_policy_rejection": {
                      "type":"number",
                      "required":false
                    },
                    "count_rejected": {
                      "type":"number",
                      "required":false
                    },
                    "count_rendered": {
                      "type":"number",
                      "required":false
                    },
                    "count_sent": {
                      "type":"number",
                      "required":false
                    },
                    "count_soft_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_spam_complaint": {
                      "type":"number",
                      "required":false
                    },
                    "count_targeted": {
                      "type":"number",
                      "required":false
                    },
                    "count_undetermined_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_unique_clicked": {
                      "type":"number",
                      "required":false
                    },
                    "count_unique_confirmed_opened": {
                      "type":"number",
                      "required":false
                    },
                    "count_unique_rendered": {
                      "type":"number",
                      "required":false
                    },
                    "total_delivery_time_first": {
                      "type":"number",
                      "required":false
                    },
                    "total_delivery_time_subsequent": {
                      "type":"number",
                      "required":false
                    },
                    "total_msg_volume": {
                      "type":"number",
                      "required":false
                    }
                  }
                }
            }
          }
        }
        ```

### Deliverability Metrics Summary [GET]

Provides high-level summary of aggregate metrics and lists the child endpoints that contain
aggregate data, which can be used as "group by" qualifiers.

+ Parameters
    + from (required, datetime, `2014-07-11T08:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
    + to = `now` (optional, datetime, `2014-07-20T09:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
    + domains (optional, list, `gmail.com,yahoo.com,hotmail.com`) ... Comma-delimited list of domains to include
    + campaigns (optional, list, `Black Friday`) ... Comma-delimited list of campaigns to include
    + templates (optional, list, `summer-sale`) ... Comma-delimited list of template IDs to include
    + nodes (optional, list, `Email-MSys-1,Email-MSys-2,Email-MSys-3`) ... Comma-delimited list of nodes to include ( **Note:** SparkPost Elite only )
    + bindings (optional, list, `Confirmation`) ... Comma-delimited list of bindings to include ( **Note:** SparkPost Elite only )
    + binding_groups (optional, list, `Transaction`) ... Comma-delimited list of binding groups to include ( **Note:** SparkPost Elite only )
    + protocols (optional, list, `smtp`) ... Comma-delimited list of protocols for filtering ( **Note:** SparkPost Elite only )
        + Values
            + `smtp`
    + metrics (required, list) ... Comma-delimited list of metrics for filtering

        + Values
            + `count_injected`
            + `count_bounce`
            + `count_rejected`
            + `count_delivered`
            + `count_delivered_first`
            + `count_delivered_subsequent`
            + `total_delivery_time_first`
            + `total_delivery_time_subsequent`
            + `total_msg_volume`
            + `count_policy_rejection`
            + `count_generation_rejection`
            + `count_generation_failed`
            + `count_inband_bounce`
            + `count_outofband_bounce`
            + `count_soft_bounce`
            + `count_hard_bounce`
            + `count_block_bounce`
            + `count_admin_bounce`
            + `count_undetermined_bounce`
            + `count_delayed`
            + `count_delayed_first`
            + `count_rendered`
            + `count_unique_rendered`
            + `count_unique_confirmed_opened`
            + `count_clicked`
            + `count_unique_clicked`
            + `count_targeted`
            + `count_sent`
            + `count_accepted`
            + `count_spam_complaint`

    + timezone =`UTC` (optional, string, `America/New_York`) ... Standard timezone identification string, defaults to `UTC`

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json)

  [Deliverability Metrics][]



## Deliverability Metrics by Domain [/metrics/deliverability/domain{?from,to,domains,campaigns,templates,nodes,bindings,binding_groups,protocols,metrics,timezone,order_by,limit}]

+ Model

    + Body

        ```
        {
          "results": [
            {
              "domain": "aol.com",
              "count_targeted": 34432,
              "count_injected": 32323,
              "count_rejected": 2343,
              "count_sent": 34344
            },
            {
              "domain": "foo.net",
              "count_targeted": 34432,
              "count_injected": 32323,
              "count_rejected": 2343,
              "count_sent": 34344
            }
          ]
        }
        ```

    + Schema

        ```
        {
          "type":"object",
          "$schema": "http://json-schema.org/draft-03/schema",
          "required":false,
          "properties":{
            "results": {
              "type":"array",
              "required":false,
              "items":
                {
                  "type":"object",
                  "required":false,
                  "properties":{
                    "count_accepted": {
                      "type":"number",
                      "required":false
                    },
                    "count_admin_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_block_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_clicked": {
                      "type":"number",
                      "required":false
                    },
                    "count_delayed_first": {
                      "type":"number",
                      "required":false
                    },
                    "count_delayed": {
                      "type":"number",
                      "required":false
                    },
                    "count_delivered_first": {
                      "type":"number",
                      "required":false
                    },
                    "count_delivered_subsequent": {
                      "type":"number",
                      "required":false
                    },
                    "count_delivered": {
                      "type":"number",
                      "required":false
                    },
                    "count_generation_failed": {
                      "type":"number",
                      "required":false
                    },
                    "count_generation_rejection": {
                      "type":"number",
                      "required":false
                    },
                    "count_hard_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_inband_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_injected": {
                      "type":"number",
                      "required":false
                    },
                    "count_outofband_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_policy_rejection": {
                      "type":"number",
                      "required":false
                    },
                    "count_rejected": {
                      "type":"number",
                      "required":false
                    },
                    "count_rendered": {
                      "type":"number",
                      "required":false
                    },
                    "count_sent": {
                      "type":"number",
                      "required":false
                    },
                    "count_soft_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_spam_complaint": {
                      "type":"number",
                      "required":false
                    },
                    "count_targeted": {
                      "type":"number",
                      "required":false
                    },
                    "count_undetermined_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_unique_clicked": {
                      "type":"number",
                      "required":false
                    },
                    "count_unique_confirmed_opened": {
                      "type":"number",
                      "required":false
                    },
                    "count_unique_rendered": {
                      "type":"number",
                      "required":false
                    },
                    "domain": {
                      "type":"string",
                      "required":false
                    },
                    "total_delivery_time_first": {
                      "type":"number",
                      "required":false
                    },
                    "total_delivery_time_subsequent": {
                      "type":"number",
                      "required":false
                    },
                    "total_msg_volume": {
                      "type":"number",
                      "required":false
                    }
                  }
                }
            }
          }
        }
        ```

### Deliverability Metrics by Domain [GET]

Provides aggregate metrics grouped by domain over the time window specified.

+ Parameters
  + from (required, datetime, `2014-07-11T08:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
  + to = `now` (optional, datetime, `2014-07-20T09:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
  + domains (optional, list, `gmail.com,yahoo.com,hotmail.com`) ... Comma-delimited list of domains to include
  + campaigns (optional, list, `Black Friday`) ... Comma-delimited list of campaigns to include
  + templates (optional, list, `summer-sale`) ... Comma-delimited list of template IDs to include
  + nodes (optional, list, `Email-MSys-1,Email-MSys-2,Email-MSys-3`) ... Comma-delimited list of nodes to include ( **Note:** SparkPost Elite only )
  + bindings (optional, list, `Confirmation`) ... Comma-delimited list of bindings to include ( **Note:** SparkPost Elite only )
  + binding_groups (optional, list, `Transaction`) ... Comma-delimited list of binding groups to include ( **Note:** SparkPost Elite only )
  + protocols (optional, list, `smtp`) ... Comma-delimited list of protocols for filtering ( **Note:** SparkPost Elite only )
      + Values
          + `smtp`
  + metrics (required, list) ... Comma-delimited list of metrics for filtering
        
        + Values
            + `count_injected`
            + `count_bounce`
            + `count_rejected`
            + `count_delivered`
            + `count_delivered_first`
            + `count_delivered_subsequent`
            + `total_delivery_time_first`
            + `total_delivery_time_subsequent`
            + `total_msg_volume`
            + `count_policy_rejection`
            + `count_generation_rejection`
            + `count_generation_failed`
            + `count_inband_bounce`
            + `count_outofband_bounce`
            + `count_soft_bounce`
            + `count_hard_bounce`
            + `count_block_bounce`
            + `count_admin_bounce`
            + `count_undetermined_bounce`
            + `count_delayed`
            + `count_delayed_first`
            + `count_rendered`
            + `count_unique_rendered`
            + `count_unique_confirmed_opened`
            + `count_clicked`
            + `count_unique_clicked`
            + `count_targeted`
            + `count_sent`
            + `count_accepted`
            + `count_spam_complaint`
            
  + timezone =`UTC` (optional, string, `America/New_York`) ... Standard timezone identification string, defaults to `UTC`
  + limit (optional, int, `5`) ... Maximum number of results to return
  + order_by (optional, string, `count_injected`) ... Metric by which to order results

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json)

  [Deliverability Metrics by Domain][]


## Deliverability Metrics by Binding [/metrics/deliverability/binding{?from,to,domains,campaigns,templates,nodes,bindings,binding_groups,protocols,metrics,timezone,limit,order_by}]
+ Model

    + Body

        ```
        {
          "results": [
            {
              "binding": "binding-0",
              "count_targeted": 34432,
              "count_injected": 32323,
              "count_rejected": 2343,
              "count_sent": 34344
            },
            {
              "binding": "binding-1",
              "count_targeted": 34432,
              "count_injected": 32323,
              "count_rejected": 2343,
              "count_sent": 34344
            }
          ]
        }
        ```

    + Schema

        ```
        {
          "type":"object",
          "$schema": "http://json-schema.org/draft-03/schema",
          "required":false,
          "properties":{
            "results": {
              "type":"array",
              "required":false,
              "items":
                {
                  "type":"object",
                  "required":false,
                  "properties":{
                    "binding": {
                      "type":"string",
                      "required":false
                    },
                    "count_accepted": {
                      "type":"number",
                      "required":false
                    },
                    "count_admin_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_block_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_clicked": {
                      "type":"number",
                      "required":false
                    },
                    "count_delayed_first": {
                      "type":"number",
                      "required":false
                    },
                    "count_delayed": {
                      "type":"number",
                      "required":false
                    },
                    "count_delivered_first": {
                      "type":"number",
                      "required":false
                    },
                    "count_delivered_subsequent": {
                      "type":"number",
                      "required":false
                    },
                    "count_delivered": {
                      "type":"number",
                      "required":false
                    },
                    "count_generation_failed": {
                      "type":"number",
                      "required":false
                    },
                    "count_generation_rejection": {
                      "type":"number",
                      "required":false
                    },
                    "count_hard_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_inband_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_injected": {
                      "type":"number",
                      "required":false
                    },
                    "count_outofband_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_policy_rejection": {
                      "type":"number",
                      "required":false
                    },
                    "count_rejected": {
                      "type":"number",
                      "required":false
                    },
                    "count_rendered": {
                      "type":"number",
                      "required":false
                    },
                    "count_sent": {
                      "type":"number",
                      "required":false
                    },
                    "count_soft_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_spam_complaint": {
                      "type":"number",
                      "required":false
                    },
                    "count_targeted": {
                      "type":"number",
                      "required":false
                    },
                    "count_undetermined_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_unique_clicked": {
                      "type":"number",
                      "required":false
                    },
                    "count_unique_confirmed_opened": {
                      "type":"number",
                      "required":false
                    },
                    "count_unique_rendered": {
                      "type":"number",
                      "required":false
                    },
                    "total_delivery_time_first": {
                      "type":"number",
                      "required":false
                    },
                    "total_delivery_time_subsequent": {
                      "type":"number",
                      "required":false
                    },
                    "total_msg_volume": {
                      "type":"number",
                      "required":false
                    }
                  }
                }
            }
          }
        }
        ```


### Deliverability Metrics by Binding [GET]

**Note:** This endpoint is available in SparkPost Elite only.

Provides aggregate metrics grouped by binding over the time window specified.

+ Parameters
  + from (required, datetime, `2014-07-11T08:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
  + to = `now` (optional, datetime, `2014-07-20T09:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
  + domains (optional, list, `gmail.com,yahoo.com,hotmail.com`) ... Comma-delimited list of domains to include
  + campaigns (optional, list, `Black Friday`) ... Comma-delimited list of campaigns to include
  + templates (optional, list, `summer-sale`) ... Comma-delimited list of template IDs to include
  + nodes (optional, list, `Email-MSys-1,Email-MSys-2,Email-MSys-3`) ... Comma-delimited list of nodes to include ( **Note:** SparkPost Elite only )
  + bindings (optional, list, `Confirmation`) ... Comma-delimited list of bindings to include ( **Note:** SparkPost Elite only )
  + binding_groups (optional, list, `Transaction`) ... Comma-delimited list of binding groups to include ( **Note:** SparkPost Elite only )
  + protocols (optional, list, `smtp`) ... Comma-delimited list of protocols for filtering ( **Note:** SparkPost Elite only )
      + Values
          + `smtp`
  + metrics (required, list, `count_targeted`) ... Comma-delimited list of metrics for filtering
      + Values
          + `count_injected`
          + `count_bounce`
          + `count_rejected`
          + `count_delivered`
          + `count_delivered_first`
          + `count_delivered_subsequent`
          + `total_delivery_time_first`
          + `total_delivery_time_subsequent`
          + `total_msg_volume`
          + `count_policy_rejection`
          + `count_generation_rejection`
          + `count_generation_failed`
          + `count_inband_bounce`
          + `count_outofband_bounce`
          + `count_soft_bounce`
          + `count_hard_bounce`
          + `count_block_bounce`
          + `count_admin_bounce`
          + `count_undetermined_bounce`
          + `count_delayed`
          + `count_delayed_first`
          + `count_rendered`
          + `count_unique_rendered`
          + `count_unique_confirmed_opened`
          + `count_clicked`
          + `count_unique_clicked`
          + `count_targeted`
          + `count_sent`
          + `count_accepted`
          + `count_spam_complaint`
  + timezone =`UTC` (optional, string, `America/New_York`) ... Standard timezone identification string, defaults to `UTC`
  + limit (optional, int, `5`) ... Maximum number of results to return
  + order_by (optional, string, `count_injected`) ... Metric by which to order results

+ Request

  + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200


## Deliverability Metrics by Binding Group [/metrics/deliverability/binding-group{?from,to,domains,campaigns,templates,nodes,bindings,binding_groups,protocols,metrics,timezone,limit,order_by}]

+ Model

    + Body

        ```
        {
          "results": [
            {
              "binding_group": "bg-0",
              "count_targeted": 34432,
              "count_injected": 32323,
              "count_rejected": 2343,
              "count_sent": 34344
            },
            {
              "binding_group": "bg-1",
              "count_targeted": 34432,
              "count_injected": 32323,
              "count_rejected": 2343,
              "count_sent": 34344
            }
          ]
        }
        ```

    + Schema

        ```
        {
          "type":"object",
          "$schema": "http://json-schema.org/draft-03/schema",
          "required":false,
          "properties":{
            "results": {
              "type":"array",
              "required":false,
              "items":
                {
                  "type":"object",
                  "required":false,
                  "properties":{
                    "binding_group": {
                      "type":"string",
                      "required":false
                    },
                    "count_accepted": {
                      "type":"number",
                      "required":false
                    },
                    "count_admin_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_block_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_clicked": {
                      "type":"number",
                      "required":false
                    },
                    "count_delayed_first": {
                      "type":"number",
                      "required":false
                    },
                    "count_delayed": {
                      "type":"number",
                      "required":false
                    },
                    "count_delivered_first": {
                      "type":"number",
                      "required":false
                    },
                    "count_delivered_subsequent": {
                      "type":"number",
                      "required":false
                    },
                    "count_delivered": {
                      "type":"number",
                      "required":false
                    },
                    "count_generation_failed": {
                      "type":"number",
                      "required":false
                    },
                    "count_generation_rejection": {
                      "type":"number",
                      "required":false
                    },
                    "count_hard_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_inband_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_injected": {
                      "type":"number",
                      "required":false
                    },
                    "count_outofband_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_policy_rejection": {
                      "type":"number",
                      "required":false
                    },
                    "count_rejected": {
                      "type":"number",
                      "required":false
                    },
                    "count_rendered": {
                      "type":"number",
                      "required":false
                    },
                    "count_sent": {
                      "type":"number",
                      "required":false
                    },
                    "count_soft_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_spam_complaint": {
                      "type":"number",
                      "required":false
                    },
                    "count_targeted": {
                      "type":"number",
                      "required":false
                    },
                    "count_undetermined_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_unique_clicked": {
                      "type":"number",
                      "required":false
                    },
                    "count_unique_confirmed_opened": {
                      "type":"number",
                      "required":false
                    },
                    "count_unique_rendered": {
                      "type":"number",
                      "required":false
                    },
                    "total_delivery_time_first": {
                      "type":"number",
                      "required":false
                    },
                    "total_delivery_time_subsequent": {
                      "type":"number",
                      "required":false
                    },
                    "total_msg_volume": {
                      "type":"number",
                      "required":false
                    }
                  }
                }
            }
          }
        }
        ```

### Deliverability Metrics by Binding Group [GET]

**Note:** This endpoint is available in SparkPost Elite only.

Provides aggregate metrics grouped by binding group over the time window specified.

+ Parameters
  + from (required, datetime, `2014-07-11T08:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
  + to = `now` (optional, datetime, `2014-07-20T09:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
  + domains (optional, list, `gmail.com,yahoo.com,hotmail.com`) ... Comma-delimited list of domains to include
  + campaigns (optional, list, `Black Friday`) ... Comma-delimited list of campaigns to include
  + templates (optional, list, `summer-sale`) ... Comma-delimited list of template IDs to include
  + nodes (optional, list, `Email-MSys-1,Email-MSys-2,Email-MSys-3`) ... Comma-delimited list of nodes to include ( **Note:** SparkPost Elite only )
  + bindings (optional, list, `Confirmation`) ... Comma-delimited list of bindings to include ( **Note:** SparkPost Elite only )
  + binding_groups (optional, list, `Transaction`) ... Comma-delimited list of binding groups to include ( **Note:** SparkPost Elite only )
  + protocols (optional, list, `smtp`) ... Comma-delimited list of protocols for filtering ( **Note:** SparkPost Elite only )
      + Values
          + `smtp`
  + metrics (required, list, `count_targeted`) ... Comma-delimited list of metrics for filtering
      + Values
          + `count_injected`
          + `count_bounce`
          + `count_rejected`
          + `count_delivered`
          + `count_delivered_first`
          + `count_delivered_subsequent`
          + `total_delivery_time_first`
          + `total_delivery_time_subsequent`
          + `total_msg_volume`
          + `count_policy_rejection`
          + `count_generation_rejection`
          + `count_generation_failed`
          + `count_inband_bounce`
          + `count_outofband_bounce`
          + `count_soft_bounce`
          + `count_hard_bounce`
          + `count_block_bounce`
          + `count_admin_bounce`
          + `count_undetermined_bounce`
          + `count_delayed`
          + `count_delayed_first`
          + `count_rendered`
          + `count_unique_rendered`
          + `count_unique_confirmed_opened`
          + `count_clicked`
          + `count_unique_clicked`
          + `count_targeted`
          + `count_sent`
          + `count_accepted`
          + `count_spam_complaint`
  + timezone =`UTC` (optional, string, `America/New_York`) ... Standard timezone identification string, defaults to `UTC`
  + limit (optional, int, `5`) ... Maximum number of results to return
  + order_by (optional, string, `count_injected`) ... Metric by which to order results

+ Request

  + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json)

  [Deliverability Metrics by Binding Group][]


## Deliverability Metrics by Campaign [/metrics/deliverability/campaign{?from,to,domains,campaigns,templates,nodes,bindings,binding_groups,protocols,metrics,timezone,limit,order_by}]


+ Model

    + Body

        ```
        {
          "results": [
            {
              "campaign_id": "campaign-0",
              "count_targeted": 34432,
              "count_injected": 32323,
              "count_rejected": 2343,
              "count_sent": 34344
            },
            {
              "campaign_id": "campaign-1",
              "count_targeted": 34432,
              "count_injected": 32323,
              "count_rejected": 2343,
              "count_sent": 34344
            }
          ]
        }
        ```

    + Schema

        ```
        {
          "type":"object",
          "$schema": "http://json-schema.org/draft-03/schema",
          "required":false,
          "properties":{
            "results": {
              "type":"array",
              "required":false,
              "items":
                {
                  "type":"object",
                  "required":false,
                  "properties":{
                    "campaign_id": {
                      "type":"string",
                      "required":false
                    },
                    "count_accepted": {
                      "type":"number",
                      "required":false
                    },
                    "count_admin_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_block_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_clicked": {
                      "type":"number",
                      "required":false
                    },
                    "count_delayed_first": {
                      "type":"number",
                      "required":false
                    },
                    "count_delayed": {
                      "type":"number",
                      "required":false
                    },
                    "count_delivered_first": {
                      "type":"number",
                      "required":false
                    },
                    "count_delivered_subsequent": {
                      "type":"number",
                      "required":false
                    },
                    "count_delivered": {
                      "type":"number",
                      "required":false
                    },
                    "count_generation_failed": {
                      "type":"number",
                      "required":false
                    },
                    "count_generation_rejection": {
                      "type":"number",
                      "required":false
                    },
                    "count_hard_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_inband_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_injected": {
                      "type":"number",
                      "required":false
                    },
                    "count_outofband_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_policy_rejection": {
                      "type":"number",
                      "required":false
                    },
                    "count_rejected": {
                      "type":"number",
                      "required":false
                    },
                    "count_rendered": {
                      "type":"number",
                      "required":false
                    },
                    "count_sent": {
                      "type":"number",
                      "required":false
                    },
                    "count_soft_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_spam_complaint": {
                      "type":"number",
                      "required":false
                    },
                    "count_targeted": {
                      "type":"number",
                      "required":false
                    },
                    "count_undetermined_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_unique_clicked": {
                      "type":"number",
                      "required":false
                    },
                    "count_unique_confirmed_opened": {
                      "type":"number",
                      "required":false
                    },
                    "count_unique_rendered": {
                      "type":"number",
                      "required":false
                    },
                    "total_delivery_time_first": {
                      "type":"number",
                      "required":false
                    },
                    "total_delivery_time_subsequent": {
                      "type":"number",
                      "required":false
                    },
                    "total_msg_volume": {
                      "type":"number",
                      "required":false
                    }
                  }
                }
            }
          }
        }
        ```

### Deliverability Metrics by Campaign [GET]

Provides aggregate metrics grouped by campaign over the time window specified.

+ Parameters
    + from (required, datetime, `2014-07-11T08:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
    + to = `now` (optional, datetime, `2014-07-20T09:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
    + domains (optional, list, `gmail.com,yahoo.com,hotmail.com`) ... Comma-delimited list of domains to include
    + campaigns (optional, list, `Black Friday`) ... Comma-delimited list of campaigns to include
    + templates (optional, list, `summer-sale`) ... Comma-delimited list of template IDs to include
    + nodes (optional, list, `Email-MSys-1,Email-MSys-2,Email-MSys-3`) ... Comma-delimited list of nodes to include ( **Note:** SparkPost Elite only )
    + bindings (optional, list, `Confirmation`) ... Comma-delimited list of bindings to include ( **Note:** SparkPost Elite only )
    + binding_groups (optional, list, `Transaction`) ... Comma-delimited list of binding groups to include ( **Note:** SparkPost Elite only )
    + protocols (optional, list, `smtp`) ... Comma-delimited list of protocols for filtering ( **Note:** SparkPost Elite only )
      + Values
          + `smtp`
    + metrics (required, list) ... Comma-delimited list of metrics for filtering
      
        + Values
            + `count_injected`
            + `count_bounce`
            + `count_rejected`
            + `count_delivered`
            + `count_delivered_first`
            + `count_delivered_subsequent`
            + `total_delivery_time_first`
            + `total_delivery_time_subsequent`
            + `total_msg_volume`
            + `count_policy_rejection`
            + `count_generation_rejection`
            + `count_generation_failed`
            + `count_inband_bounce`
            + `count_outofband_bounce`
            + `count_soft_bounce`
            + `count_hard_bounce`
            + `count_block_bounce`
            + `count_admin_bounce`
            + `count_undetermined_bounce`
            + `count_delayed`
            + `count_delayed_first`
            + `count_rendered`
            + `count_unique_rendered`
            + `count_unique_confirmed_opened`
            + `count_clicked`
            + `count_unique_clicked`
            + `count_targeted`
            + `count_sent`
            + `count_accepted`
            + `count_spam_complaint`
            
    + timezone =`UTC` (optional, string, `America/New_York`) ... Standard timezone identification string, defaults to `UTC`
    + limit (optional, int, `5`) ... Maximum number of results to return
    + order_by (optional, string, `count_injected`) ... Metric by which to order results

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json)

  [Deliverability Metrics by Campaign][]


## Deliverability Metrics by Template [/metrics/deliverability/template{?from,to,domains,campaigns,templates,nodes,bindings,binding_groups,protocols,metrics,timezone,limit,order_by}]


+ Model

    + Body

        ```
        {
          "results": [
            {
              "template_id": "template-0",
              "count_targeted": 34432,
              "count_injected": 32323,
              "count_rejected": 2343,
              "count_sent": 34344
            },
            {
              "template_id": "template-1",
              "count_targeted": 34432,
              "count_injected": 32323,
              "count_rejected": 2343,
              "count_sent": 34344
            }
          ]
        }
        ```

    + Schema

        ```
        {
          "type":"object",
          "$schema": "http://json-schema.org/draft-03/schema",
          "required":false,
          "properties":{
            "results": {
              "type":"array",
              "required":false,
              "items":
                {
                  "type":"object",
                  "required":false,
                  "properties":{
                    "count_accepted": {
                      "type":"number",
                      "required":false
                    },
                    "count_admin_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_block_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_clicked": {
                      "type":"number",
                      "required":false
                    },
                    "count_delayed_first": {
                      "type":"number",
                      "required":false
                    },
                    "count_delayed": {
                      "type":"number",
                      "required":false
                    },
                    "count_delivered_first": {
                      "type":"number",
                      "required":false
                    },
                    "count_delivered_subsequent": {
                      "type":"number",
                      "required":false
                    },
                    "count_delivered": {
                      "type":"number",
                      "required":false
                    },
                    "count_generation_failed": {
                      "type":"number",
                      "required":false
                    },
                    "count_generation_rejection": {
                      "type":"number",
                      "required":false
                    },
                    "count_hard_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_inband_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_injected": {
                      "type":"number",
                      "required":false
                    },
                    "count_outofband_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_policy_rejection": {
                      "type":"number",
                      "required":false
                    },
                    "count_rejected": {
                      "type":"number",
                      "required":false
                    },
                    "count_rendered": {
                      "type":"number",
                      "required":false
                    },
                    "count_sent": {
                      "type":"number",
                      "required":false
                    },
                    "count_soft_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_spam_complaint": {
                      "type":"number",
                      "required":false
                    },
                    "count_targeted": {
                      "type":"number",
                      "required":false
                    },
                    "count_undetermined_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_unique_clicked": {
                      "type":"number",
                      "required":false
                    },
                    "count_unique_confirmed_opened": {
                      "type":"number",
                      "required":false
                    },
                    "count_unique_rendered": {
                      "type":"number",
                      "required":false
                    },
                    "template_id": {
                      "type":"string",
                      "required":false
                    },
                    "total_delivery_time_first": {
                      "type":"number",
                      "required":false
                    },
                    "total_delivery_time_subsequent": {
                      "type":"number",
                      "required":false
                    },
                    "total_msg_volume": {
                      "type":"number",
                      "required":false
                    }
                  }
                }
            }
          }
        }
        ```

### Deliverability Metrics by Template [GET]

Provides aggregate metrics grouped by template over the time window specified.

+ Parameters
    + from (required, datetime, `2014-07-11T08:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
    + to = `now` (optional, datetime, `2014-07-20T09:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
    + domains (optional, list, `gmail.com,yahoo.com,hotmail.com`) ... Comma-delimited list of domains to include
    + campaigns (optional, list, `Black Friday`) ... Comma-delimited list of campaigns to include
    + templates (optional, list, `summer-sale`) ... Comma-delimited list of template IDs to include
    + nodes (optional, list, `Email-MSys-1,Email-MSys-2,Email-MSys-3`) ... Comma-delimited list of nodes to include ( **Note:** SparkPost Elite only )
    + bindings (optional, list, `Confirmation`) ... Comma-delimited list of bindings to include ( **Note:** SparkPost Elite only )
    + binding_groups (optional, list, `Transaction`) ... Comma-delimited list of binding groups to include ( **Note:** SparkPost Elite only )
    + protocols (optional, list, `smtp`) ... Comma-delimited list of protocols for filtering ( **Note:** SparkPost Elite only )
        + Values
            + `smtp`
    + metrics (required, list) ... Comma-delimited list of metrics for filtering
      
        + Values
            + `count_injected`
            + `count_bounce`
            + `count_rejected`
            + `count_delivered`
            + `count_delivered_first`
            + `count_delivered_subsequent`
            + `total_delivery_time_first`
            + `total_delivery_time_subsequent`
            + `total_msg_volume`
            + `count_policy_rejection`
            + `count_generation_rejection`
            + `count_generation_failed`
            + `count_inband_bounce`
            + `count_outofband_bounce`
            + `count_soft_bounce`
            + `count_hard_bounce`
            + `count_block_bounce`
            + `count_admin_bounce`
            + `count_undetermined_bounce`
            + `count_delayed`
            + `count_delayed_first`
            + `count_rendered`
            + `count_unique_rendered`
            + `count_unique_confirmed_opened`
            + `count_clicked`
            + `count_unique_clicked`
            + `count_targeted`
            + `count_sent`
            + `count_accepted`
            + `count_spam_complaint`
            
  + timezone =`UTC` (optional, string, `America/New_York`) ... Standard timezone identification string, defaults to `UTC`
  + limit (optional, int, `5`) ... Maximum number of results to return
  + order_by (optional, string, `count_injected`) ... Metric by which to order results

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json)

  [Deliverability Metrics by Template][]


## Deliverability Metrics by Watched Domain [/metrics/deliverability/watched-domain{?from,to,domains,campaigns,templates,nodes,bindings,binding_groups,protocols,metrics,timezone,limit,order_by}]

+ Model

    + Body

        ```
        {
          "results": [
            {
              "watched_domain": "aol.com",
              "count_targeted": 34432,
              "count_injected": 32323,
              "count_rejected": 2343,
              "count_sent": 34344
            },
            {
              "watched_domain": "gmail.com",
              "count_targeted": 34432,
              "count_injected": 32323,
              "count_rejected": 2343,
              "count_sent": 34344
            }
          ]
        }
        ```

    + Schema

        ```
        {
          "type":"object",
          "$schema": "http://json-schema.org/draft-03/schema",
          "required":false,
          "properties":{
            "results": {
              "type":"array",
              "required":false,
              "items":
                {
                  "type":"object",
                  "required":false,
                  "properties":{
                    "count_accepted": {
                      "type":"number",
                      "required":false
                    },
                    "count_admin_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_block_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_clicked": {
                      "type":"number",
                      "required":false
                    },
                    "count_delayed_first": {
                      "type":"number",
                      "required":false
                    },
                    "count_delayed": {
                      "type":"number",
                      "required":false
                    },
                    "count_delivered_first": {
                      "type":"number",
                      "required":false
                    },
                    "count_delivered_subsequent": {
                      "type":"number",
                      "required":false
                    },
                    "count_delivered": {
                      "type":"number",
                      "required":false
                    },
                    "count_generation_failed": {
                      "type":"number",
                      "required":false
                    },
                    "count_generation_rejection": {
                      "type":"number",
                      "required":false
                    },
                    "count_hard_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_inband_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_injected": {
                      "type":"number",
                      "required":false
                    },
                    "count_outofband_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_policy_rejection": {
                      "type":"number",
                      "required":false
                    },
                    "count_rejected": {
                      "type":"number",
                      "required":false
                    },
                    "count_rendered": {
                      "type":"number",
                      "required":false
                    },
                    "count_sent": {
                      "type":"number",
                      "required":false
                    },
                    "count_soft_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_spam_complaint": {
                      "type":"number",
                      "required":false
                    },
                    "count_targeted": {
                      "type":"number",
                      "required":false
                    },
                    "count_undetermined_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_unique_clicked": {
                      "type":"number",
                      "required":false
                    },
                    "count_unique_confirmed_opened": {
                      "type":"number",
                      "required":false
                    },
                    "count_unique_rendered": {
                      "type":"number",
                      "required":false
                    },
                    "total_delivery_time_first": {
                      "type":"number",
                      "required":false
                    },
                    "total_delivery_time_subsequent": {
                      "type":"number",
                      "required":false
                    },
                    "total_msg_volume": {
                      "type":"number",
                      "required":false
                    },
                    "watched_domain": {
                      "type":"string",
                      "required":false
                    }
                  }
                }
            }
          }
        }
        ```

### Deliverability Metrics by Watched Domain [GET]

Provides aggregate metrics grouped by watched domain over the time window specified. The difference
between domain and watched domain is that watched domains are comprised of the top 99% domains
in the world.

+ Parameters
    + from (required, datetime, `2014-07-11T08:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
    + to = `now` (optional, datetime, `2014-07-20T09:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
    + domains (optional, list, `gmail.com,yahoo.com,hotmail.com`) ... Comma-delimited list of domains to include
    + campaigns (optional, list, `Black Friday`) ... Comma-delimited list of campaigns to include
    + templates (optional, list, `summer-sale`) ... Comma-delimited list of template IDs to include
    + nodes (optional, list, `Email-MSys-1,Email-MSys-2,Email-MSys-3`) ... Comma-delimited list of nodes to include ( **Note:** SparkPost Elite only )
    + bindings (optional, list, `Confirmation`) ... Comma-delimited list of bindings to include ( **Note:** SparkPost Elite only )
    + binding_groups (optional, list, `Transaction`) ... Comma-delimited list of binding groups to include ( **Note:** SparkPost Elite only )
    + protocols (optional, list, `smtp`) ... Comma-delimited list of protocols for filtering ( **Note:** SparkPost Elite only )
        + Values
            + `smtp`
    + metrics (required, list) ... Comma-delimited list of metrics for filtering
        + Values
            + `count_injected`
            + `count_bounce`
            + `count_rejected`
            + `count_delivered`
            + `count_delivered_first`
            + `count_delivered_subsequent`
            + `total_delivery_time_first`
            + `total_delivery_time_subsequent`
            + `total_msg_volume`
            + `count_policy_rejection`
            + `count_generation_rejection`
            + `count_generation_failed`
            + `count_inband_bounce`
            + `count_outofband_bounce`
            + `count_soft_bounce`
            + `count_hard_bounce`
            + `count_block_bounce`
            + `count_admin_bounce`
            + `count_undetermined_bounce`
            + `count_delayed`
            + `count_delayed_first`
            + `count_rendered`
            + `count_unique_rendered`
            + `count_unique_confirmed_opened`
            + `count_clicked`
            + `count_unique_clicked`
            + `count_targeted`
            + `count_sent`
            + `count_accepted`
            + `count_spam_complaint`
            
  + timezone =`UTC` (optional, string, `America/New_York`) ... Standard timezone identification string, defaults to `UTC`
  + limit (optional, int, `5`) ... Maximum number of results to return
  + order_by (optional, string, `count_injected`) ... Metric by which to order results

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json)

  [Deliverability Metrics by Watched Domain][]


## Time Series [/metrics/deliverability/time-series{?from,to,domains,campaigns,templates,nodes,bindings,binding_groups,protocols,precision,metrics,timezone}]


+ Model

    + Body

        ```
        {
          "results": [
            {
              "ts": "2013-09-06T09:30",
              "count_targeted": 34432,
              "count_injected": 32323,
              "count_rejected": 2343,
              "count_sent": 34344,
              "count_delivered": 3434,
              "count_delivered_first": 343,
              "count_delivered_subsequent": 22323,
              "total_msg_volume": 33434,
              "count_inband_bounce": 2,
              "count_outofband_bounce": 2,
              "count_bounce": 2,
              "count_soft_bounce": 8,
              "count_hard_bounce": 6,
              "count_block_bounce": 4,
              "count_admin_bounce": 2,
              "count_undetermined_bounce": 2,
              "count_accepted": 3434,
              "count_delayed": 2,
              "count_generation_failed": 1,
              "count_generation_rejection": 1,
              "count_delayed_first": 5,
              "count_rendered": 111,
              "count_unique_rendered": 111,
              "count_unique_confirmed_opened": 111,
              "count_clicked": 8,
              "count_unique_clicked": 8,
              "count_spam_complaint": 5
            },
            {
              "ts": "2013-09-06T09:29",
              "count_targeted": 34432,
              "count_injected": 32323,
              "count_rejected": 2343,
              "count_sent": 34344,
              "count_delivered": 3434,
              "count_delivered_first": 343,
              "count_delivered_subsequent": 22323,
              "total_msg_volume": 33434,
              "count_inband_bounce": 2,
              "count_outofband_bounce": 2,
              "count_bounce": 2,
              "count_soft_bounce": 8,
              "count_hard_bounce": 6,
              "count_block_bounce": 4,
              "count_admin_bounce": 2,
              "count_undetermined_bounce": 2,
              "count_accepted": 3434,
              "count_delayed": 2,
              "count_generation_failed": 1,
              "count_generation_rejection": 1,
              "count_delayed_first": 5,
              "count_rendered": 111,
              "count_unique_rendered": 111,
              "count_unique_confirmed_opened": 111,
              "count_clicked": 8,
              "count_unique_clicked": 8,
              "count_spam_complaint": 7
            }
          ]
        }
        ```

    + Schema

        ```
        {
          "type":"object",
          "$schema": "http://json-schema.org/draft-03/schema",
          "required":false,
          "properties":{
            "results": {
              "type":"array",
              "required":false,
              "items":
                {
                  "type":"object",
                  "required":false,
                  "properties":{
                    "count_accepted": {
                      "type":"number",
                      "required":false
                    },
                    "count_admin_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_block_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_clicked": {
                      "type":"number",
                      "required":false
                    },
                    "count_delayed_first": {
                      "type":"number",
                      "required":false
                    },
                    "count_delayed": {
                      "type":"number",
                      "required":false
                    },
                    "count_delivered_first": {
                      "type":"number",
                      "required":false
                    },
                    "count_delivered_subsequent": {
                      "type":"number",
                      "required":false
                    },
                    "count_delivered": {
                      "type":"number",
                      "required":false
                    },
                    "count_generation_failed": {
                      "type":"number",
                      "required":false
                    },
                    "count_generation_rejection": {
                      "type":"number",
                      "required":false
                    },
                    "count_hard_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_inband_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_injected": {
                      "type":"number",
                      "required":false
                    },
                    "count_outofband_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_policy_rejection": {
                      "type":"number",
                      "required":false
                    },
                    "count_rejected": {
                      "type":"number",
                      "required":false
                    },
                    "count_rendered": {
                      "type":"number",
                      "required":false
                    },
                    "count_sent": {
                      "type":"number",
                      "required":false
                    },
                    "count_soft_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_spam_complaint": {
                      "type":"number",
                      "required":false
                    },
                    "count_targeted": {
                      "type":"number",
                      "required":false
                    },
                    "count_undetermined_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_unique_clicked": {
                      "type":"number",
                      "required":false
                    },
                    "count_unique_confirmed_opened": {
                      "type":"number",
                      "required":false
                    },
                    "count_unique_rendered": {
                      "type":"number",
                      "required":false
                    },
                    "total_delivery_time_first": {
                      "type":"number",
                      "required":false
                    },
                    "total_delivery_time_subsequent": {
                      "type":"number",
                      "required":false
                    },
                    "total_msg_volume": {
                      "type":"number",
                      "required":false
                    },
                    "ts": {
                      "type":"string",
                      "required":false
                    }
                  }
                }
            }
          }
        }
        ```

### Time-Series Metrics [GET]

Provides deliverability metrics ordered by a precision of time.

The following table describes the validation for the **precision** parameter:

| Value of         | Valid for time window of    |
|---------------|-------------|
|1min, 5min |day |
|hour |month |
|day, month |_any_ |

+ Parameters
    + from (required, datetime, `2014-07-11T07:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
    + to = `now` (optional, datetime, `2014-07-20T08:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
    + domains (optional, list `gmail.com,yahoo.com,hotmail.com`) ... Comma-delimited list of domains for filtering
    + campaigns (optional, list, `summerSale,promotionX`) ... Comma-delimited list of campaigns for filtering
    + templates (optional, list, `summer-sale`) ... Comma-delimited list of template IDs to include
    + nodes (optional, list, `Email-MSys-1,Email-MSys-2,Email-MSys-3`) ... Comma-delimited list of nodes by which to filter ( **Note:** SparkPost Elite only )
    + bindings (optional, list, `bindingA,bindingB,bindingC`) ... Comma-delimited list of bindings for filtering ( **Note:** SparkPost Elite only )
    + binding_groups (optional, list, `bg1,bg2,bg3`) ... Comma-delimited list of binding groups for filtering ( **Note:** SparkPost Elite only )
    + protocols (optional, list, `smtp`) ... Comma-delimited list of protocols for filtering ( **Note:** SparkPost Elite only )
      + Values
          + `smtp`
    + precision (optional, string, `day`) ... Precision of timeseries data returned

        + Values
            + `1min`
            + `5min`
            + `15min`
            + `hour`
            + `12hr`
            + `day`
            + `week`
            + `month`

    + metrics (required, list) ... Comma-delimited list of metrics for filtering
  
        + Values
            + `count_injected`
            + `count_bounce`
            + `count_rejected`
            + `count_delivered`
            + `count_delivered_first`
            + `count_delivered_subsequent`
            + `total_delivery_time_first`
            + `total_delivery_time_subsequent`
            + `total_msg_volume`
            + `count_policy_rejection`
            + `count_generation_rejection`
            + `count_generation_failed`
            + `count_inband_bounce`
            + `count_outofband_bounce`
            + `count_soft_bounce`
            + `count_hard_bounce`
            + `count_block_bounce`
            + `count_admin_bounce`
            + `count_undetermined_bounce`
            + `count_delayed`
            + `count_delayed_first`
            + `count_rendered`
            + `count_unique_rendered`
            + `count_unique_confirmed_opened`
            + `count_clicked`
            + `count_unique_clicked`
            + `count_targeted`
            + `count_sent`
            + `count_accepted`
            + `count_spam_complaint`

    + timezone = `UTC` (optional, string `America/New_York`) ... Standard timezone identification string, defaults to `UTC`

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json)

  [Time Series][]


## Bounce Reasons [/metrics/deliverability/bounce-reason{?from,to,domains,campaigns,templates,nodes,bindings,binding_groups,protocols,metrics,timezone,limit}]

+ Model

    + Body

        ```
        {
          "results": [
            {
              "reason": "Some Fake Reason",
              "bounce_class_name": "Undetermined",
              "bounce_class_description": "The response text could not be identified",
              "bounce_category_id": 0,
              "bounce_category_name": "Undetermined",
              "classification_id": 1,
              "count_inband_bounce": 119,
              "count_outofband_bounce": 118,
              "count_bounce": 237
            },
            {
              "reason": "Some Fake Reason",
              "bounce_class_name": "Invalid Recipient",
              "bounce_class_description": "The recipient is invalid",
              "bounce_category_id": 1,
              "bounce_category_name": "Hard",
              "classification_id": 10,
              "count_inband_bounce": 133,
              "count_outofband_bounce": 126,
              "count_bounce": 259
            }
          ]
        }
        ```

    + Schema

        ```
        {
          "type":"object",
          "$schema": "http://json-schema.org/draft-03/schema",
          "required":false,
          "properties":{
            "results": {
              "type":"array",
              "required":false,
              "items":
                {
                  "type":"object",
                  "required":false,
                  "properties":{
                    "bounce_category_name": {
                      "type":"string",
                      "required":false
                    },
                    "bounce_class_description": {
                      "type":"string",
                      "required":false
                    },
                    "bounce_class_name": {
                      "type":"string",
                      "required":false
                    },
                    "classification_id": {
                      "type":"number",
                      "required":false
                    },
                    "count_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_inband_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_outofband_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "reason": {
                      "type":"string",
                      "required":false
                    }
                  }
                }
            }
          }
        }
        ```

### Bounce Reason Metrics [GET]

Provides deliverability metrics, specific to bounce events, grouped by the bounce reasons.

+ Parameters
    + from (required, datetime, `2014-07-11T08:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
    + to = `now` (optional, datetime, `2014-07-20T09:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
    + domains (optional, list, `gmail.com,yahoo.com,hotmail.com`) ... Comma-delimited list of domains to include
    + campaigns (optional, list, `Black Friday`) ... Comma-delimited list of campaigns to include
    + templates (optional, list, `summer-sale`) ... Comma-delimited list of template IDs to include
    + nodes (optional, list, `Email-MSys-1,Email-MSys-2,Email-MSys-3`) ... Comma-delimited list of nodes to include ( **Note:** SparkPost Elite only )
    + bindings (optional, list, `Confirmation`) ... Comma-delimited list of bindings to include ( **Note:** SparkPost Elite only )
    + binding_groups (optional, list, `Transaction`) ... Comma-delimited list of binding groups to include ( **Note:** SparkPost Elite only )
    + protocols (optional, list, `smtp`) ... Comma-delimited list of protocols to include ( **Note:** SparkPost Elite only )
        + Values
            + `smtp`
    + metrics (required, list) ... Comma-delimited list of metrics to include
        
        + Values
            + `count_bounce`
            + `count_inband_bounce`
            + `count_outofband_bounce`
            
    + timezone =`UTC` (optional, string, `America/New_York`) ... Standard timezone identification string, defaults to `UTC`
    + limit (optional, int, `5`) ... Maximum number of results to return [1,1000]

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json)

  [Bounce Reasons][]


## Bounce Reasons By Domain [/metrics/deliverability/bounce-reason/domain{?from,to,domains,campaigns,templates,nodes,bindings,binding_groups,protocols,metrics,timezone,limit}]

+ Model

    + Body

        ```
        {
          "results": [
            {
              "reason": "Some Fake Reason",
              "domain": "example.com",
              "bounce_class_name": "Undetermined",
              "bounce_class_description": "The response text could not be identified",
              "bounce_category_id": 0,
              "bounce_category_name": "Undetermined",
              "classification_id": 1,
              "count_inband_bounce": 119,
              "count_outofband_bounce": 118,
              "count_bounce": 237
            },
            {
              "reason": "Some Fake Reason",
              "domain": "aol.com",
              "bounce_class_name": "Invalid Recipient",
              "bounce_class_description": "The recipient is invalid",
              "bounce_category_id": 1,
              "bounce_category_name": "Hard",
              "classification_id": 10,
              "count_inband_bounce": 133,
              "count_outofband_bounce": 126,
              "count_bounce": 259
            }
          ]
        }
        ```

    + Schema

        ```
        {
          "type":"object",
          "$schema": "http://json-schema.org/draft-03/schema",
          "required":false,
          "properties":{
            "results": {
              "type":"array",
              "required":false,
              "items":
                {
                  "type":"object",
                  "required":false,
                  "properties":{
                    "bounce_category_name": {
                      "type":"string",
                      "required":false
                    },
                    "bounce_class_description": {
                      "type":"string",
                      "required":false
                    },
                    "bounce_class_name": {
                      "type":"string",
                      "required":false
                    },
                    "classification_id": {
                      "type":"number",
                      "required":false
                    },
                    "count_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_inband_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_outofband_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "reason": {
                      "type":"string",
                      "required":false
                    },
                    "domain": {
                      "type":"string",
                      "required":false
                    }
                  }
                }
            }
          }
        }
        ```

### Bounce Reason Metrics By Domain [GET]

Provides deliverability metrics, specific to bounce events, grouped by the domain and bounce reasons.

+ Parameters
    + from (required, datetime, `2014-07-11T08:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
    + to = `now` (optional, datetime, `2014-07-20T09:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
    + domains (optional, list, `gmail.com,yahoo.com,hotmail.com`) ... Comma-delimited list of domains to include
    + campaigns (optional, list, `Black Friday`) ... Comma-delimited list of campaigns to include
    + templates (optional, list, `summer-sale`) ... Comma-delimited list of template IDs to include
    + nodes (optional, list, `Email-MSys-1,Email-MSys-2,Email-MSys-3`) ... Comma-delimited list of nodes to include ( **Note:** SparkPost Elite only )
    + bindings (optional, list, `Confirmation`) ... Comma-delimited list of bindings to include ( **Note:** SparkPost Elite only )
    + binding_groups (optional, list, `Transaction`) ... Comma-delimited list of binding groups to include ( **Note:** SparkPost Elite only )
    + protocols (optional, list, `smtp`) ... Comma-delimited list of protocols to include ( **Note:** SparkPost Elite only )
        + Values
            + `smtp`
    + metrics (required, list) ... Comma-delimited list of metrics to include
        
        + Values
            + `count_bounce`
            + `count_inband_bounce`
            + `count_outofband_bounce`
            
    + timezone =`UTC` (optional, string, `America/New_York`) ... Standard timezone identification string, defaults to `UTC`
    + limit (optional, int, `5`) ... Maximum number of results to return [1,1000]

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json)

  [Bounce Reasons By Domain][]


## Bounce Classifications [/metrics/deliverability/bounce-classification{?from,to,domains,campaigns,templates,nodes,bindings,binding_groups,protocols,metrics,timezone,limit}]

+ Model

    + Body

        ```
        {
          "results": [
            {
              "bounce_class_name": "Undetermined",
              "bounce_class_description": "The response text could not be identified",
              "bounce_category_name": "Undetermined",
              "count_bounce": 226,
              "count_inband_bounce": 205,
              "count_outofband_bounce": 21,
              "classification_id": 1
            },
            {
              "bounce_class_name": "Invalid Recipient",
              "bounce_class_description": "The recipient is invalid",
              "bounce_category_name": "Hard",
              "count_bounce": 249,
              "count_inband_bounce": 224,
              "count_outofband_bounce": 25,
              "classification_id": 10
            }
          ]
        }
        ```

    + Schema

        ```
        {
          "type":"object",
          "$schema": "http://json-schema.org/draft-03/schema",
          "required":false,
          "properties":{
            "results": {
              "type":"array",
              "required":false,
              "items":
                {
                  "type":"object",
                  "required":false,
                  "properties":{
                    "bounce_category_name": {
                      "type":"string",
                      "required":false
                    },
                    "bounce_class_description": {
                      "type":"string",
                      "required":false
                    },
                    "bounce_class_name": {
                      "type":"string",
                      "required":false
                    },
                    "classification_id": {
                      "type":"number",
                      "required":false
                    },
                    "count_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_inband_bounce": {
                      "type":"number",
                      "required":false
                    },
                    "count_outofband_bounce": {
                      "type":"number",
                      "required":false
                    }
                  }
                }
            }
          }
        }
        ```

### Bounce Classification Metrics [GET]

Provides deliverability metrics, specific to bounce events, grouped by the bounce classification. (See [Bounce Classification Codes.](https://www.sparkpost.com/docs/bounce-classification-codes))

+ Parameters
    + from (required, datetime, `2014-07-11T08:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
    + to = `now` (optional, datetime, `2014-07-20T09:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
    + domains (optional, list, `gmail.com,yahoo.com,hotmail.com`) ... Comma-delimited list of domains to include
    + campaigns (optional, list, `Black Friday`) ... Comma-delimited list of campaigns to include
    + templates (optional, list, `summer-sale`) ... Comma-delimited list of template IDs to include
    + nodes (optional, list, `Email-MSys-1,Email-MSys-2,Email-MSys-3,Email-MSys-4,Email-MSys-5`) ... Comma-5`limited list of nodes to include ( **Note:** SparkPost Elite only )
    + bindings (optional, list, `Confirmation`) ... Comma-delimited list of bindings to include ( **Note:** SparkPost Elite only )
    + binding_groups (optional, list, `Transaction`) ... Comma-delimited list of binding groups to include ( **Note:** SparkPost Elite only )
    + protocols (optional, list, `smtp`) ... Comma-delimited list of protocols for filtering ( **Note:** SparkPost Elite only )
        + Values
            + `smtp`
    + timezone =`UTC` (optional, string, `America/New_York`) ... Standard timezone identification string, defaults to `UTC`
    + metrics (required, list) ... Comma-delimited list of metrics to include
        
        + Values
            + `count_bounce`
            + `count_inband_bounce`
            + `count_outofband_bounce`
            
    + limit (optional, int, `5`) ... Maximum number of results to return

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json)

  [Bounce Classifications][]


## Rejection Reasons [/metrics/deliverability/rejection-reason{?from,to,domains,campaigns,templates,nodes,bindings,binding_groups,protocols,timezone,limit}]

+ Model

    + Body

        ```
        {
          "results": [
            {
              "reason": "520 rejection message",
              "count_rejected": 30,
              "rejection_category_id": 2,
              "rejection_type": "Generation Rejection"
            },
            {
              "reason": "503 rejection message",
              "count_rejected": 24,
              "rejection_category_id": 1,
              "rejection_type": "Policy Rejection"
            }
          ]
        }
        ```

    + Schema

        ```
        {
          "type":"object",
          "$schema": "http://json-schema.org/draft-03/schema",
          "required":false,
          "properties":{
            "results": {
              "type":"array",
              "required":false,
              "items":
                {
                  "type":"object",
                  "required":false,
                  "properties":{
                    "count_rejected": {
                      "type":"number",
                      "required":false
                    },
                    "reason": {
                      "type":"string",
                      "required":false
                    },
                    "rejection_category_id": {
                      "type":"number",
                      "required":false
                    },
                    "rejection_category_name": {
                      "type":"string",
                      "required":false
                    }
                  }
                }
            }
          }
        }
        ```

### Rejection Reason Metrics [GET]

Provides deliverability metrics, specific to rejection events, grouped by the rejection reasons.

+ Parameters
  + from (required, datetime, `2014-07-11T08:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
  + to = `now` (optional, datetime, `2014-07-20T09:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
  + domains (optional, list, `gmail.com,yahoo.com,hotmail.com`) ... Comma-delimited list of domains to include
  + campaigns (optional, list, `Black Friday`) ... Comma-delimited list of campaigns to include
  + templates (optional, list, `summer-sale`) ... Comma-delimited list of template IDs to include
  + nodes (optional, list, `Email-MSys-1,Email-MSys-2,Email-MSys-3,Email-MSys-4,Email-MSys-5`) ... Comma-delimited list of nodes to include ( **Note:** SparkPost Elite only )
  + bindings (optional, list, `Confirmation`) ... Comma-delimited list of bindings to include ( **Note:** SparkPost Elite only )
  + binding_groups (optional, list, `Transaction`) ... Comma-delimited list of binding groups to include ( **Note:** SparkPost Elite only )
  + protocols (optional, list, `smtp`) ... Comma-delimited list of protocols for filtering ( **Note:** SparkPost Elite only )
      + Values
          + `smtp`
  + timezone =`UTC` (optional, string, `America/New_York`) ... Standard timezone identification string, defaults to `UTC`
  + limit (optional, int, `5`) ... Maximum number of results to return

+ Response 200 (application/json)

  [Rejection Reasons][]


## Rejection Reasons By Domain [/metrics/deliverability/rejection-reason/domain{?from,to,domains,campaigns,templates,nodes,bindings,binding_groups,protocols,timezone,limit}]

+ Model

    + Body

        ```
        {
          "results": [
            {
              "reason": "520 rejection message",
              "domain": "example.com",
              "count_rejected": 30,
              "rejection_category_id": 2,
              "rejection_type": "Generation Rejection"
            },
            {
              "reason": "503 rejection message",
              "domain": "aol.com",
              "count_rejected": 24,
              "rejection_category_id": 1,
              "rejection_type": "Policy Rejection"
            }
          ]
        }
        ```

    + Schema

        ```
        {
          "type":"object",
          "$schema": "http://json-schema.org/draft-03/schema",
          "required":false,
          "properties":{
            "results": {
              "type":"array",
              "required":false,
              "items":
                {
                  "type":"object",
                  "required":false,
                  "properties":{
                    "count_rejected": {
                      "type":"number",
                      "required":false
                    },
                    "reason": {
                      "type":"string",
                      "required":false
                    },
                     "domain": {
                       "type":"string",
                       "required":false
                     },
                    "rejection_category_id": {
                      "type":"number",
                      "required":false
                    },
                    "rejection_category_name": {
                      "type":"string",
                      "required":false
                    }
                  }
                }
            }
          }
        }
        ```

### Rejection Reason Metrics By Domain [GET]

Provides deliverability metrics, specific to rejection events, grouped by the domain and rejection reasons.

+ Parameters
  + from (required, datetime, `2014-07-11T08:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
  + to = `now` (optional, datetime, `2014-07-20T09:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
  + domains (optional, list, `gmail.com,yahoo.com,hotmail.com`) ... Comma-delimited list of domains to include
  + campaigns (optional, list, `Black Friday`) ... Comma-delimited list of campaigns to include  
  + templates (optional, list, `summer-sale`) ... Comma-delimited list of template IDs to include
  + nodes (optional, list, `Email-MSys-1,Email-MSys-2,Email-MSys-3,Email-MSys-4,Email-MSys-5`) ... Comma-delimited list of nodes to include ( **Note:** SparkPost Elite only )
  + bindings (optional, list, `Confirmation`) ... Comma-delimited list of bindings to include ( **Note:** SparkPost Elite only )
  + binding_groups (optional, list, `Transaction`) ... Comma-delimited list of binding groups to include ( **Note:** SparkPost Elite only )
  + protocols (optional, list, `smtp`) ... Comma-delimited list of protocols for filtering ( **Note:** SparkPost Elite only )
      + Values
          + `smtp`
  + timezone =`UTC` (optional, string, `America/New_York`) ... Standard timezone identification string, defaults to `UTC`
  + limit (optional, int, `5`) ... Maximum number of results to return

+ Response 200 (application/json)

  [Rejection Reasons By Domain][]


## Delay Reasons [/metrics/deliverability/delay-reason{?from,to,domains,campaigns,templates,nodes,bindings,binding_groups,protocols,timezone,limit}]

+ Model

    + Body

        ```
        {
          "results":[
            {
              "reason": "400 fake tempfail reason",
              "count_delayed": 200,
              "count_delayed_first": 100
            },
            {
              "reason": "425 fake tempfail reason",
              "count_delayed": 100,
              "count_delayed_first": 50
            }
          ]
        }
        ```

    + Schema

        ```
        {
          "type":"object",
          "$schema": "http://json-schema.org/draft-03/schema",
          "required":false,
          "properties":{
            "results": {
              "type":"array",
              "required":false,
              "items":
                {
                  "type":"object",
                  "required":false,
                  "properties":{
                    "count_delayed_first": {
                      "type":"number",
                      "required":false
                    },
                    "count_delayed": {
                      "type":"number",
                      "required":false
                    },
                    "reason": {
                      "type":"string",
                      "required":false
                    }
                  }
                }
            }
          }
        }
        ```

### Delay Reason Metrics [GET]

Provides deliverability metrics, specific to delay events, grouped by the delay reasons.

+ Parameters
  + from (required, datetime, `2014-07-11T08:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
  + to = `now` (optional, datetime, `2014-07-20T09:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
  + domains (optional, list, `gmail.com,yahoo.com,hotmail.com`) ... Comma-delimited list of domains to include
  + campaigns (optional, list, `Black Friday`) ... Comma-delimited list of campaigns to include  
  + templates (optional, list, `summer-sale`) ... Comma-delimited list of template IDs to include
  + nodes (optional, list, `Email-MSys-1,Email-MSys-2,Email-MSys-3,Email-MSys-4,Email-MSys-5`) ... Comma-delimited list of nodes to include ( **Note:** SparkPost Elite only )
  + bindings (optional, list, `Confirmation`) ... Comma-delimited list of bindings to include ( **Note:** SparkPost Elite only )
  + binding_groups (optional, list, `Transaction`) ... Comma-delimited list of binding groups to include ( **Note:** SparkPost Elite only )
  + protocols (optional, list, `smtp`) ... Comma-delimited list of protocols for filtering ( **Note:** SparkPost Elite only )
      + Values
          + `smtp`
  + timezone =`UTC` (optional, string, `America/New_York`) ... Standard timezone identification string, defaults to `UTC`
  + limit (optional, int, `5`) ... Maximum number of results to return

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json)

  [Delay Reasons][]


## Delay Reasons By Domain [/metrics/deliverability/delay-reason/domain{?from,to,domains,campaigns,templates,nodes,bindings,binding_groups,protocols,timezone,limit}]

+ Model

    + Body

        ```
        {
          "results":[
            {
              "reason": "400 fake tempfail reason",
              "domain": "example.com",
              "count_delayed": 200,
              "count_delayed_first": 100
            },
            {
              "reason": "425 fake tempfail reason",
              "domain": "aol.com",
              "count_delayed": 100,
              "count_delayed_first": 50
            }
          ]
        }
        ```

    + Schema

        ```
        {
          "type":"object",
          "$schema": "http://json-schema.org/draft-03/schema",
          "required":false,
          "properties":{
            "results": {
              "type":"array",
              "required":false,
              "items":
                {
                  "type":"object",
                  "required":false,
                  "properties":{
                    "count_delayed_first": {
                      "type":"number",
                      "required":false
                    },
                    "count_delayed": {
                      "type":"number",
                      "required":false
                    },
                    "reason": {
                      "type":"string",
                      "required":false
                    },
                    "domain": {
                      "type":"string",
                      "required":false
                    }
                  }
                }
            }
          }
        }
        ```

### Delay Reason Metrics By Domain [GET]

Provides deliverability metrics, specific to delay events, grouped by the domain and delay reasons.

+ Parameters
  + from (required, datetime, `2014-07-11T08:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
  + to = `now` (optional, datetime, `2014-07-20T09:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
  + domains (optional, list, `gmail.com,yahoo.com,hotmail.com`) ... Comma-delimited list of domains to include
  + campaigns (optional, list, `Black Friday`) ... Comma-delimited list of campaigns to include  
  + templates (optional, list, `summer-sale`) ... Comma-delimited list of template IDs to include
  + nodes (optional, list, `Email-MSys-1,Email-MSys-2,Email-MSys-3,Email-MSys-4,Email-MSys-5`) ... Comma-delimited list of nodes to include ( **Note:** SparkPost Elite only )
  + bindings (optional, list, `Confirmation`) ... Comma-delimited list of bindings to include ( **Note:** SparkPost Elite only )
  + binding_groups (optional, list, `Transaction`) ... Comma-delimited list of binding groups to include ( **Note:** SparkPost Elite only )
  + protocols (optional, list, `smtp`) ... Comma-delimited list of protocols for filtering ( **Note:** SparkPost Elite only )
      + Values
          + `smtp`
  + timezone =`UTC` (optional, string, `America/New_York`) ... Standard timezone identification string, defaults to `UTC`
  + limit (optional, int, `5`) ... Maximum number of results to return

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json)

  [Delay Reasons By Domain][]

## Engagement Details [/metrics/deliverability/link-name{?from,to,timezone,campaigns,templates,metrics,limit}]

+ Model

    + Body

        ```
        {
          "results":[
            {
              "link_name": "top banner link",
              "count_clicked": 123,
              "count_raw_clicked": 456
            },
            {
              "link_name": "http://www.test.com/buy/our/stuff/now",
              "count_clicked": 123,
              "count_raw_clicked": 456
            }
          ]
        }
        ```

    + Schema

        ```
        {
          "type":"object",
          "$schema": "http://json-schema.org/draft-03/schema",
          "required":false,
          "properties":{
            "results": {
              "type":"array",
              "required":false,
              "items":
                {
                  "type":"object",
                  "required":false,
                  "properties":{
                    "count_clicked": {
                      "type":"number",
                      "required":false
                    },
                    "count_raw_clicked": {
                      "type":"number",
                      "required":false
                    },
                    "link_name": {
                      "type":"string",
                      "required":false
                    }
                  }
                }
            }
          }
        }
        ```

### Engagement Details [GET]

Provides deliverability metrics, specific to engagement events (clicks/opens), grouped by the link
name (or URL if no link name exists).

+ Parameters
    + from (required, datetime, `2014-07-11T09:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
    + to = `now` (optional, datetime, `2014-07-20T00:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
    + timezone = `UTC` (optional, string, `America/New_York`) ... Standard timezone identification string, defaults to `UTC`
    + metrics (required, list) ... Comma-delimited list of metrics to include
      
        + Values
            + `count_clicked`
            + `count_raw_clicked`
    
    + campaigns (optional, list, `Black Friday`) ... Comma-delimited list of campaigns to include
    + templates (optional, list, `summer-sale`) ... Comma-delimited list of template IDs to include
    + limit (optional, int, `5`) ... Maximum number of results to return

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json)

  [Engagement Details][]


## Deliveries By Attempt [/metrics/deliverability/attempt{?from,to,domains,campaigns,templates,nodes,bindings,binding_groups,protocols,timezone}]

+ Model

    + Body

        ```
        {
          "results":[
            {
              "attempt": "1",
              "count_delivered": 100
            },
            {
              "attempt": "2",
              "count_delivered": 150
            }
          ]
        }
        ```

    + Schema

        ```
        {
          "type":"object",
          "$schema": "http://json-schema.org/draft-03/schema",
          "required":false,
          "properties":{
            "results": {
              "type":"array",
              "required":false,
              "items":
                {
                  "type":"object",
                  "required":false,
                  "properties":{
                    "attempt": {
                      "type":"number",
                      "required":false
                    },
                    "count_delivered": {
                      "type":"number",
                      "required":false
                    }
                  }
                }
            }
          }
        }
        ```

### Deliveries By Attempt [GET]

Provides aggregate count of deliveries grouped by the attempt number.

+ Parameters
  + from (required, datetime, `2014-07-11T08:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
  + to = `now` (optional, datetime, `2014-07-20T09:00`) ... Datetime in format of YYYY-MM-DDTHH:MM
  + domains (optional, list, `gmail.com,yahoo.com,hotmail.com`) ... Comma-delimited list of domains to include
  + campaigns (optional, list, `Black Friday`) ... Comma-delimited list of campaigns to include
  + templates (optional, list, `summer-sale`) ... Comma-delimited list of template IDs to include
  + nodes (optional, list, `Email-MSys-1,Email-MSys-2,Email-MSys-3,Email-MSys-4,Email-MSys-5`) ... Comma-delimited list of nodes to include ( **Note:** SparkPost Elite only )
  + bindings (optional, list, `Confirmation`) ... Comma-delimited list of bindings to include ( **Note:** SparkPost Elite only )
  + binding_groups (optional, list, `Transaction`) ... Comma-delimited list of binding groups to include ( **Note:** SparkPost Elite only )
  + protocols (optional, list, `smtp`) ... Comma-delimited list of protocols for filtering ( **Note:** SparkPost Elite only )
      + Values
          + `smtp`
  + timezone =`UTC` (optional, string, `America/New_York`) ... Standard timezone identification string, defaults to `UTC`

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json)

  [Deliveries By Attempt][]

## Binding Groups List [/metrics/binding-groups]

+ Model (application/json)

    + Body

        ```
        {
          "results": {
             "binding-groups": [
             "bg-1",
             "bg-2",
             "bg-3",
             "bg-4",
             "bg-5"
            ]
          }
        }
        ```

    + Schema

        ```
        {
          "type": "object",
          "required": true,
          "properties": {
            "results": {
              "type": "object",
              "required": true,
              "properties": {
                "binding-groups": {
                  "type": "array",
                  "required": false
                }
              }
            }
          }
        }
        ```

### Binding Groups List [GET]

**Note:** This endpoint is available in SparkPost Elite only.

Returns a list of binding groups that the Metrics API contains data on.

+ Parameters
    + match (optional, string, `example`) ... Only return results containing this string
    + limit (optional, int, `5`) ... Maximum number of results to return

+ Request

  + Headers
      Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
      Accept: application/json


+ Response 200

    [Binding Groups List][]


## Bindings List [/metrics/bindings]

+ Model (application/json)

    + Body

        ```
        {
          "results": {
             "bindings": [
               "binding-1",
               "binding-2",
               "binding-3",
               "binding-4",
               "binding-5"
            ]
          }
        }
        ```

    + Schema

        ```
        {
          "type": "object",
          "required": true,
          "properties": {
            "results": {
              "type": "object",
              "required": true,
              "properties": {
                "bindings": {
                  "type": "array",
                  "required": false
                }
              }
            }
          }
        }
        ```

### Bindings List [GET]

**Note:** This endpoint is available in SparkPost Elite only.

Returns a list of bindings that the Metrics API contains data on.

+ Parameters
    + match (optional, string, `example`) ... Only return results containing this string
    + limit (optional, int, `5`) ... Maximum number of results to return

+ Request

  + Headers
      Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
      Accept: application/json

+ Response 200

 [Bindings List][]


## Campaigns List [/metrics/campaigns]

+ Model (application/json)

    + Body

        ```
        {
          "results": {
             "campaigns": [
               "Labor Day Sale",
               "New Year's Sale",
               "Founder's Day Event",
               "Winter Event",
               "Promotion X"
            ]
          }
        }
        ```

    + Schema

        ```
        {
          "type": "object",
          "required": true,
          "properties": {
            "results": {
              "type": "object",
              "required": true,
              "properties": {
                "campaigns": {
                  "type": "array",
                  "required": false
                }
              }
            }
          }
        }
        ```

### Campaigns List [GET]

Returns a list of campaigns that the Metrics API contains data on.

+ Parameters
    + match (optional, string, `example`) ... Only return results containing this string
    + limit (optional, int, `5`) ... Maximum number of results to return

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200

  [Campaigns List][]


## Domains List [/metrics/domains]

+ Model (application/json)

    + Body

        ```
        {
          "results": {
             "domains": [
               "gmail.com",
               "yahoo.com",
               "msn.com",
               "aol.com",
               "hotmail.com"
            ]
          }
        }
        ```

    + Schema

        ```
        {
          "type": "object",
          "required": true,
          "properties": {
            "results": {
              "type": "object",
              "required": true,
              "properties": {
                "domains": {
                  "type": "array",
                  "required": false
                }
              }
            }
          }
        }
        ```

### Domains List [GET]

Returns a list of domains that the Metrics API contains data on.

+ Parameters
    + match (optional, string, `example`) ... Only return results containing this string
    + limit (optional, int, `5`) ... Maximum number of results to return

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200

  [Domains List][]

## Nodes List [/metrics/nodes]

+ Model (application/json)

    + Body

        ```
        {
          "results": {
             "nodes": [
               "advertising-1.example.com",
               "advertising-2.example.com",
               "affiliate-1.example.com",
               "affiliate-2.example.com",
               "affiliate-3.example.com"
            ]
          }
        }
        ```

    + Schema

        ```
        {
          "type": "object",
          "required": true,
          "properties": {
            "results": {
              "type": "object",
              "required": true,
              "properties": {
                "nodes": {
                  "type": "array",
                  "required": false
                }
              }
            }
          }
        }
        ```

### Nodes List [GET]

**Note:** This endpoint is available in SparkPost Elite only.

Returns a list of nodes that the Metrics API contains data on.

+ Request

  + Headers
      Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
      Accept: application/json

+ Response 200

 [Nodes List][]


## Protocols List [/metrics/protocols]

+ Model (application/json)

    + Body

        ```
        {
          "results": {
             "protocols": [
               "smtp",
               "smpp",
               "mm7",
               "gcm",
               "apns"
            ]
          }
        }
        ```

    + Schema

        ```
        {
          "type": "object",
          "required": true,
          "properties": {
            "results": {
              "type": "object",
              "required": true,
              "properties": {
                "protocols": {
                  "type": "array",
                  "required": false
                }
              }
            }
          }
        }
        ```

### Protocols List [GET]

**Note:** This endpoint is available in SparkPost Elite only.

Returns a list of protocols that the Metrics API contains data on.

+ Request

  + Headers
      Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
      Accept: application/json

+ Response 200

 [Protocols List][]

# Group Message Events

The Message Events API provides the means to search the raw events generated by SparkPost.

## Copyrights
__**The SparkPost message events API uses MaxMind software [MaxMind License](/docs/3RD_PARTY_LICENSES.md)**__

## Events Documentation [/message-events/events/documentation]

### Documentation [GET]

List descriptions of the event fields that could be included in a response from the Message Events search endpoint. Fields will vary by event type.

+ Request

  + Headers
      Accept: application/json

+ Response 200 (application/json)
  ```js
    {
        "results": [
            {
                "type": {
                    "description": "Type of event this record describes",
                    "sampleValue": "bounce"
                },
                "bounce_class": {
                    "description": "Classification code for a given message (see [Bounce Classification Codes](https://support.sparkpost.com/customer/portal/articles/1929896))",
                    "sampleValue": "1"
                },
                "campaign_id": {
                    "description": "Campaign of which this message was a part",
                    "sampleValue": "Example Campaign Name"
                },
                "customer_id": {
                    "description": "SparkPost-customer identifier through which this message was sent",
                    "sampleValue": "1"
                },
                "delv_method": {
                    "description": "Protocol by which SparkPost delivered this message",
                    "sampleValue": "esmtp"
                },
                "device_token": {
                    "description": "Token of the device / application targeted by this PUSH notification message. Applies only when delv_method is gcm or apn.",
                    "sampleValue": "45c19189783f867973f6e6a5cca60061ffe4fa77c547150563a1192fa9847f8a"
                },
                "error_code": {
                    "description": "Error code by which the remote server described a failed delivery attempt",
                    "sampleValue": "554"
                },
                "ip_address": {
                    "description": "IP address of the host to which SparkPost delivered this message; in engagement events, the IP address of the host where the HTTP request originated",
                    "sampleValue": "127.0.0.1"
                },
                "message_id": {
                    "description": "SparkPost-cluster-wide unique identifier for this message",
                    "sampleValue": "0e0d94b7-9085-4e3c-ab30-e3f2cd9c273e"
                },
                "msg_from": {
                    "description": "Sender address used on this message's SMTP envelope",
                    "sampleValue": "sender@example.com"
                },
                "msg_size": {
                    "description": "Message's size in bytes",
                    "sampleValue": "1337"
                },
                "num_retries": {
                    "description": "Number of failed attempts before this message was successfully delivered; when the first attempt succeeds, zero",
                    "sampleValue": "2"
                },
                "rcpt_meta": {
                    "description": "Metadata describing the message recipient",
                    "sampleValue": {
                        "customKey": "customValue"
                    }
                },
                "rcpt_tags": {
                    "description": "Tags applied to the message which generated this event",
                    "sampleValue": [
                        "male",
                        "US"
                    ]
                },
                "rcpt_to": {
                    "description": "Recipient address used on this message's SMTP envelope",
                    "sampleValue": "recipient@example.com"
                },
                "rcpt_type": {
                    "description": "Indicates that a recipient address appeared in the Cc or Bcc header or the archive JSON array",
                    "sampleValue": "cc"
                },
                "raw_reason": {
                    "description": "Unmodified, exact response returned by the remote server due to a failed delivery attempt",
                    "sampleValue": "MAIL REFUSED - IP (17.99.99.99) is in black list"
                },
                "reason": {
                    "description": "Canonicalized text of the response returned by the remote server due to a failed delivery attempt",
                    "sampleValue": "MAIL REFUSED - IP (a.b.c.d) is in black list"
                },
                "routing_domain": {
                    "description": "Domain receiving this message",
                    "sampleValue": "example.com"
                },
                "subject": {
                    "description": "Subject line from the email header",
                    "sampleValue": "Summer deals are here!"
                },
                "template_id": {
                    "description": "Slug of the template used to construct this message",
                    "sampleValue": "templ-1234"
                },
                "template_version": {
                    "description": "Version of the template used to construct this message",
                    "sampleValue": "1"
                },
                "timestamp": {
                    "description": "Event date and time, in Unix timestamp format (integer seconds since 00:00:00 GMT 1970-01-01)",
                    "sampleValue": 1427736822
                },
                "transmission_id": {
                    "description": "Transmission which originated this message",
                    "sampleValue": "65832150921904138"
                }
            }
        ]
    }
  ```


## Events Samples [/message-events/events/samples{?events}]
  
### Samples [GET]

List an example of the event data that will be included in a response from the Message Events search endpoint.

+ Parameters
  + events (optional, string, `bounce`) ... Event types for which to get a sample payload, use the Webhooks Events endpoint to list the available event types, defaults to all event types.

+ Request

  + Headers
      Accept: application/json

+ Response 200 (application/json)
  ```js
    {
        "results": [
            {
                "bounce_class": "1", 
                "campaign_id": "Example Campaign Name", 
                "customer_id": "1", 
                "delv_method": "esmtp", 
                "device_token": "45c19189783f867973f6e6a5cca60061ffe4fa77c547150563a1192fa9847f8a", 
                "error_code": "554", 
                "ip_address": "127.0.0.1", 
                "message_id": "0e0d94b7-9085-4e3c-ab30-e3f2cd9c273e", 
                "msg_from": "sender@example.com", 
                "msg_size": "1337", 
                "num_retries": "2", 
                "raw_reason": "MAIL REFUSED - IP (17.99.99.99) is in black list", 
                "rcpt_meta": {
                    "customKey": "customValue"
                }, 
                "rcpt_tags": [
                    "male", 
                    "US"
                ], 
                "rcpt_to": "recipient@example.com", 
                "rcpt_type": "cc", 
                "reason": "MAIL REFUSED - IP (a.b.c.d) is in black list", 
                "routing_domain": "example.com", 
                "subject": "Summer deals are here!", 
                "template_id": "templ-1234", 
                "template_version": "1", 
                "timestamp": 1427736822, 
                "transmission_id": "65832150921904138", 
                "type": "bounce"
            }
        ]
    }
  ```
  

## Message Events [/message-events{?bounce_classes,campaign_ids,events,friendly_froms,from,message_ids,page,per_page,reason,recipients,template_ids,timezone,to,transmission_ids}]

### Search for Message Events [GET]

Perform a filtered search for message event data. The response is sorted by descending timestamp.

+ Parameters
    + bounce_classes (optional, number, `1`) ... Comma-delimited list of bounce classification codes to search. (See [Bounce Classification Codes.](https://support.sparkpost.com/customer/portal/articles/1929896))
    + campaign_ids (optional, string, `Example Campaign Name`) ... Comma-delimited list of campaign ID's to search (i.e. campaign_id used during creation of a transmission).
    + events (optional, list, `delivery, injection, bounce, delay, policy_rejection, out_of_band, open, click, generation_failure, generation_rejection, spam_complaint, list_unsubscribe, link_unsubscribe, relay_delivery, relay_injection, relay_permfail, relay_rejection, relay_tempfail`) ... Comma-delimited list of event types to search. Defaults to all event types.
    + friendly_froms (optional, list, `sender@mail.example.com`) ... Comma-delimited list of friendly_froms to search.
    + from = `One hour ago` (optional, datetime, `2014-07-20T08:00`) ... Datetime in format of YYYY-MM-DDTHH:MM.
    + message_ids (optional, list, `0e0d94b7-9085-4e3c-ab30-e3f2cd9c273e`) ... Comma-delimited list of message ID's to search.
    + page = `1` (optional, number, `25`) ... The results page number to return. Used with per_page for paging through results.
    + per_page = `1000` (optional, number, `100`) ... Number of results to return per page. Must be between 1 and 10,000 (inclusive).
    + reason (optional, string, `bounce`) ... Bounce/failure/rejection reason that will be matched using a wildcard (e.g., %reason%).
    + recipients (optional, list, `recipient@example.com`) ... Comma-delimited list of recipients to search.
    + template_ids (optional, list, `templ-1234`) ... Comma-delimited list of template ID's to search.
    + timezone =`UTC` (optional, string, `America/New_York`) ... Standard timezone identification string.
    + to = `now` (optional, datetime, `2014-07-20T09:00`) ... Datetime in format of YYYY-MM-DDTHH:MM.
    + transmission_ids (optional, list, `65832150921904138`) ... Comma-delimited list of transmission ID's to search (i.e. id generated during creation of a transmission).

+ Request

  + Headers

      Accept: application/json
      Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

+ Response 200 (application/json)
  ```
  {
    "results": [
      {
        "type": "bounce",
        "bounce_class": "1",
        "campaign_id": "Example Campaign Name",
        "customer_id": "1",
        "error_code": "554",
        "ip_address": "127.0.0.1",
        "message_id": "0e0d94b7-9085-4e3c-ab30-e3f2cd9c273e",
        "msg_from": "sender@example.com",
        "msg_size": "1337",
        "num_retries": "2",
        "rcpt_meta": {
          "key1": "value1",
          "key2": "value2"
        },
        "rcpt_tags": [
          "male",
          "US"
        ],
        "rcpt_to": "recipient@example.com",
        "reason": "000 Example Remote MTA Bounce Message",
        "routing_domain": "example.com",
        "template_id": "templ-1234",
        "template_version": "1",
        "timestamp": "2014-07-20T08:01-00:00",
        "transmission_id": "65832150921904138"
      },
      {
        "type": "delivery",
        "campaign_id": "Example Campaign Name",
        "customer_id": "1",
        "ip_address": "127.0.0.1",
        "message_id": "0e0d94b7-9085-4e3c-ab30-e3f2cd9c273e",
        "msg_from": "sender@example.com",
        "msg_size": "1337",
        "num_retries": "2",
        "queue_time": "12",
        "rcpt_meta": {
          "key1": "value1",
          "key2": "value2"
        },
        "rcpt_tags": [
          "male",
          "US"
        ],
        "rcpt_to": "recipient@example.com",
        "routing_domain": "example.com",
        "template_id": "templ-1234",
        "template_version": "1",
        "timestamp": "2014-07-20T08:01-00:00",
        "transmission_id": "65832150921904138"
      },
      {
        "type": "injection",
        "campaign_id": "Example Campaign Name",
        "customer_id": "1",
        "message_id": "0e0d94b7-9085-4e3c-ab30-e3f2cd9c273e",
        "msg_from": "sender@example.com",
        "msg_size": "1337",
        "rcpt_meta": {
          "key1": "value1",
          "key2": "value2"
        },
        "rcpt_tags": [
          "male",
          "US"
        ],
        "rcpt_to": "recipient@example.com",
        "routing_domain": "example.com",
        "template_id": "templ-1234",
        "template_version": "1",
        "timestamp": "2014-07-20T08:01-00:00",
        "transmission_id": "65832150921904138"
      },
      {
        "type": "spam_complaint",
        "campaign_id": "Example Campaign Name",
        "customer_id": "1",
        "fbtype": "abuse",
        "message_id": "0e0d94b7-9085-4e3c-ab30-e3f2cd9c273e",
        "rcpt_meta": {
          "key1": "value1",
          "key2": "value2"
        },
        "rcpt_to": "recipient@example.com",
        "report_by": "server.email.com",
        "report_to": "abuse.example.com",
        "template_id": "templ-1234",
        "timestamp": "2014-07-20T08:01-00:00",
        "user_str": "Additional Example Information"
      },
      {
        "type": "out_of_band",
        "bounce_class": "1",
        "campaign_id": "Example Campaign Name",
        "customer_id": "1",
        "error_code": "554",
        "message_id": "0e0d94b7-9085-4e3c-ab30-e3f2cd9c273e",
        "msg_from": "sender@example.com",
        "rcpt_to": "recipient@example.com",
        "reason": "000 Example Remote MTA Bounce Message",
        "routing_domain": "example.com",
        "template_id": "templ-1234",
        "template_version": "1",
        "timestamp": 1427736822
      },
      {
        "type": "policy_rejection",
        "campaign_id": "Example Campaign Name",
        "customer_id": "1",
        "error_code": "554",
        "message_id": "0e0d94b7-9085-4e3c-ab30-e3f2cd9c273e",
        "msg_from": "sender@example.com",
        "rcpt_meta": {
          "key1": "value1",
          "key2": "value2"
        },
        "rcpt_tags": [
          "male",
          "US"
        ],
        "rcpt_to": "recipient@example.com",
        "reason": "000 Example Remote MTA Bounce Message",
        "remote_addr": "127.0.0.1",
        "template_id": "templ-1234",
        "template_version": "1",
        "timestamp": "2014-07-20T08:01-00:00",
        "transmission_id": "65832150921904138"
      },
      {
        "type": "delay",
        "bounce_class": "1",
        "campaign_id": "Example Campaign Name",
        "customer_id": "1",
        "error_code": "554",
        "ip_address": "127.0.0.1",
        "message_id": "0e0d94b7-9085-4e3c-ab30-e3f2cd9c273e",
        "msg_from": "sender@example.com",
        "msg_size": "1337",
        "num_retries": "2",
        "queue_time": "12",
        "rcpt_meta": {
          "key1": "value1",
          "key2": "value2"
        },
        "rcpt_tags": [
          "male",
          "US"
        ],
        "rcpt_to": "recipient@example.com",
        "reason": "000 Example Remote MTA Bounce Message",
        "routing_domain": "example.com",
        "template_id": "templ-1234",
        "template_version": "1",
        "timestamp": "2014-07-20T08:01-00:00",
        "transmission_id": "65832150921904138"
      },
      {
        "type": "click",
        "campaign_id": "Example Campaign Name",
        "customer_id": "1",
        "ip_address": "127.0.0.1",
        "message_id": "0e0d94b7-9085-4e3c-ab30-e3f2cd9c273e",
        "rcpt_meta": {
          "key1": "value1",
          "key2": "value2"
        },
        "rcpt_tags": [
          "male",
          "US"
        ],
        "rcpt_to": "recipient@example.com",
        "target_link_name": "Example Link Name",
        "target_link_url": "http://example.com",
        "template_id": "templ-1234",
        "template_version": "1",
        "timestamp": "2014-07-20T08:01-00:00",
        "transmission_id": "65832150921904138",
        "user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.118 Safari/537.36",
        "geo_ip": {
          "country": "US",
          "region": "MD",
          "city": "Columbia",
          "latitude": "39.1749",
          "longitude": "-76.8375"
        }
      },
      {
        "type": "open",
        "campaign_id": "Example Campaign Name",
        "customer_id": "1",
        "ip_address": "127.0.0.1",
        "message_id": "0e0d94b7-9085-4e3c-ab30-e3f2cd9c273e",
        "rcpt_meta": {
          "key1": "value1",
          "key2": "value2"
        },
        "rcpt_tags": [
          "male",
          "US"
        ],
        "rcpt_to": "recipient@example.com",
        "template_id": "templ-1234",
        "template_version": "1",
        "timestamp": "2014-07-20T08:01-00:00",
        "transmission_id": "65832150921904138",
        "user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.118 Safari/537.36",
        "geo_ip": {
          "country": "US",
          "region": "MD",
          "city": "Columbia",
          "latitude": "39.1749",
          "longitude": "-76.8375"
        }
      },
      {
        "type": "generation_failure",
        "campaign_id": "Example Campaign Name",
        "customer_id": "1",
        "error_code": "554",
        "rcpt_meta": {
          "key1": "value1",
          "key2": "value2"
        },
        "rcpt_subs": {},
        "rcpt_tags": [
          "male",
          "US"
        ],
        "rcpt_to": "recipient@example.com",
        "reason": "000 Example Remote MTA Bounce Message",
        "routing_domain": "example.com",
        "template_id": "templ-1234",
        "template_version": "1",
        "timestamp": "2014-07-20T08:01-00:00",
        "transmission_id": "65832150921904138"
      },
      {
        "type": "generation_rejection",
        "campaign_id": "Example Campaign Name",
        "customer_id": "1",
        "error_code": "554",
        "rcpt_meta": {
          "key1": "value1",
          "key2": "value2"
        },
        "rcpt_subs": {},
        "rcpt_tags": [
          "male",
          "US"
        ],
        "rcpt_to": "recipient@example.com",
        "reason": "000 Example Remote MTA Bounce Message",
        "routing_domain": "example.com",
        "template_id": "templ-1234",
        "template_version": "1",
        "timestamp": "2014-07-20T08:01-00:00",
        "transmission_id": "65832150921904138"
      },
      {
        "type": "list_unsubscribe",
        "campaign_id": "Example Campaign Name",
        "customer_id": "1",
        "mailfrom": "recipient@example.com",
        "message_id": "0e0d94b7-9085-4e3c-ab30-e3f2cd9c273e",
        "rcpt_meta": {
          "key1": "value1",
          "key2": "value2"
        },
        "rcpt_tags": [
          "male",
          "US"
        ],
        "rcpt_to": "recipient@example.com",
        "template_id": "templ-1234",
        "template_version": "1",
        "timestamp": "2014-07-20T08:01-00:00",
        "transmission_id": "65832150921904138"
      },
      {
        "type": "link_unsubscribe",
        "campaign_id": "Example Campaign Name",
        "customer_id": "1",
        "mailfrom": "recipient@example.com",
        "message_id": "0e0d94b7-9085-4e3c-ab30-e3f2cd9c273e",
        "rcpt_meta": {
          "key1": "value1",
          "key2": "value2"
        },
        "rcpt_tags": [
          "male",
          "US"
        ],
        "rcpt_to": "recipient@example.com",
        "template_id": "templ-1234",
        "template_version": "1",
        "timestamp": "2014-07-20T08:01-00:00",
        "transmission_id": "65832150921904138",
        "user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.118 Safari/537.36"
      },
      {
        "type": "relay_injection",
        "rcpt_to": "recipient@example.com",
        "msg_size": "1337",
        "routing_domain": "example.com",
        "customer_id": "1",
        "timestamp": "2014-07-20T08:01-00:00",
        "msg_from": "sender@example.com",
        "relay_id": "123-456-789"
      },
      {
        "type": "relay_rejection",
        "reason": "000 Example Remote MTA Bounce Message",
        "rcpt_to": "recipient@example.com",
        "error_code": "554",
        "msg_from": "sender@example.com",
        "remote_addr": "127.0.0.1",
        "timestamp": "2014-07-20T08:01-00:00",
        "customer_id": "1",
        "relay_id": "123-456-789"
      },
      {
        "type": "relay_delivery",
        "routing_domain": "example.com",
        "msg_from": "sender@example.com",
        "queue_time": "12",
        "customer_id": "1",
        "timestamp": "2014-07-20T08:01-00:00",
        "num_retries": "2",
        "relay_id": "123-456-789"
      },
      {
        "type": "relay_tempfail",
        "routing_domain": "example.com",
        "msg_from": "sender@example.com",
        "queue_time": "12",
        "customer_id": "1",
        "timestamp": "2014-07-20T08:01-00:00",
        "num_retries": "2",
        "reason": "000 Example Remote MTA Bounce Message",
        "error_code": "554",
        "relay_id": "123-456-789"
      },
      {
        "type": "relay_permfail",
        "routing_domain": "example.com",
        "msg_from": "sender@example.com",
        "queue_time": "12",
        "customer_id": "1",
        "timestamp": "2014-07-20T08:01-00:00",
        "num_retries": "2",
        "reason": "000 Example Remote MTA Bounce Message",
        "error_code": "554",
        "relay_id": "123-456-789"
      }
    ],
    "total_count": 1000,
    "links": [
      { 
        "href": "http://example.com/api/v1/message-events?page=1&per_page=10",
        "rel": "first"
      }, {
        "href": "http://example.com/api/v1/xyz?page=50&per_page=10",
        "rel": "previous"
      }, {
        "href": "http://example.com/api/v1/xyz?page=52&per_page=10",
        "rel": "next"
      }, {
        "href": "http://example.com/api/v1/xyz?page=100&per_page=10",
        "rel": "last"
      }    
    ]
  }
  ```

# Group Raw Log

**Note:** The Raw Log API is available for SparkPost Elite only.

In addition to the analytics data available through the UI, Metrics API, and Webhooks API, SparkPost Elite provides log files tracking the full disposition status of every message transiting the system.  The Raw Log API enables you to download these raw, compressed logs.

You can retrieve the following logs:
* Main log provides complete information about every message received and delivered by SparkPost Elite, including receptions, deliveries, transient failures, and permanent failures.
* Bounce log records in-band and out-of-band bounces.
* Rejection log stores records of inbound messages that are rejected by SparkPost Elite, either due to policy or protocol deviations.
* FBL log records the information provided by the ISP's feedback loop service with regard to spam notifications.
* Event log includes a batch of event data consisting of one or more event records, each composed of a payload wrapped in a type-specific JSON envelope. Each event record payload includes the data fields specific to that event type. For the field definitions and a mapping of the fields that constitute a payload for a given event type, use the Webhooks Events Documentation and Events Samples endpoints.

Logs include data for one day, and the log entries differ depending upon the event type. The logs, with the exception of the eventlog, are in @ delimited format. 

## Discoverability Dates [/rawlog]

The Raw Log API is designed for discoverability of available logs.  Calling the API root displays a list of dates with the corresponding URL for which logs are available.

### Log Discoverability Dates [GET]

Provides all dates with the corresponding URL for which logs are available.

+ Request

  + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json; charset=utf-8)

        {
            "results": [
                    { "date":"2014-05-14", "href":"http://host.tld/rawlog/2014/05/14" },
                    { "date":"2014-05-15", "href":"http://host.tld/rawlog/2014/05/15" },
                    { "date":"2014-05-16", "href":"http://host.tld/rawlog/2014/05/16" }
            ]
        }

## Logs by Date [/rawlog/{year}/{month}/{day}]

### Logs for a Given Date [GET]

List the URLs, one for each node that has available logs for a given date. The list is sorted by node name.

+ Parameters
  + year (required, date, `2014 (Numeric year)`) ... Year for which the log is available
  + month (required, date, `07 (1-12, Numeric month)`) ... Month for which the log is available
  + day (required, date, `23 (1-31, Numeric day)`) ... Day for which the log is available

+ Request

  + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json; charset=utf-8)
    
        {
            "results": [
                { "node":"node_1", "href":"http://host.tld/rawlog/2014/05/14/node_1" },
                { "node":"node_2", "href":"http://host.tld/rawlog/2014/05/15/node_2" },
                { "node":"node_3", "href":"http://host.tld/rawlog/2014/05/16/node_3" }
            ]
        }

+ Response 404 ()
    
        A 404 Not Found is returned if no logs are found for any nodes for the given day.


## Logs by Nodes [/rawlog/{year}/{month}/{day}/{node}]

### Logs for a Given Node [GET]

List the available logs for a given node on a given date. The response includes log type, size, and URL.

+ Parameters
  + year (required, date, `2014 (Numeric year)`) ... Year for which the log is available
  + month (required, date, `07 (1-12, Numeric month)`) ... Month for which the log is available
  + day (required, date, `23 (1-31, Numeric day)`) ... Day for which the log is available
  + node (required, string, `node_1`) ... Name of node from which the logs are to be discovered

+ Request

  + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json; charset=utf-8)
    
            {
                "results": [
                    { "log":"bounce", "size":"400218", "href":"http://host.tld/rawlog/2014/05/14/node_2/bounce" },
                    { "log":"main", "size":"610485", "href":"http://host.tld/rawlog/2014/05/15/node_2/main" },
                    { "log":"reject", "size":"526482", "href":"http://host.tld/rawlog/2014/05/16/node_2/reject" },
                    { "log":"fbl", "size":"192635", "href":"http://host.tld/rawlog/2014/05/16/node_2/fbl" },
                    { "log":"event", "size":"351932", "href":"http://host.tld/rawlog/2014/05/16/node_2/event" }
                ]
            }

+ Response 404 ()
    
        A 404 Not Found is returned if no logs are found for the given date and node.



## Retrieve [/rawlog/{year}/{month}/{day}/{node}/{log}]

### Retrieve a Log [GET]

Retrieve a specific log for a given date and node. The API returns the data for the log as a bzip2 compressed file.  If the resource is not available, the API returns 404 'Not Found'.


+ Parameters
  + year (required, date, `2014 (Numeric year)`) ... Year for which the log is available
  + month (required, date, `07 (1-12, Numeric month)`) ... Month for which the log is available
  + day (required, date, ` 23 (1-31, Numeric day)`) ... Day for which the log is available
  + node (required, string, `node_1`) ... Name of node from which to download the log
  + log (required, string, `main`) ... Available logs are main, bounce, reject, fbl, or event


+ Request

  + Headers
      
            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 ('Content-Disposition': 'attachment; filename=log_name', 'Content-Type': 'application/octet-stream')
    
        {
            "results": {}
        }

+ Response 404 ()
    
        A 404 Not Found is returned if the requested Log file is not found on the specified node.

# Group Recipient Lists

A recipient list is a collection of recipients that can be used in a transmission.  The Recipient
List API provides the means to manage recipient lists.  When creating a new
transmission using the Transmissions API, the recipients may be submitted "inline" as part of the
transmission data, or a stored recipient list id attribute can be specified.

The Recipient List API operates on lists as a whole and does not currently support management of individual recipients.

## Recipient List Attributes
| Field         | Type     | Description                           | Required   | Notes   |
|------------------------|:-:       |---------------------------------------|-------------|--------|
|id |string       |Short, unique, recipient list identifier |no  |If an id is not specified, one is generated.  Maximum length - 64 bytes |
|name    |string       |Short, pretty/readable recipient list display name, not required to be unique |no  |If a name is not specified, then defaults to the same value as id.  Maximum length - 64 bytes |
|description |string |Detailed description of the recipient list|no | Maximum length - 1024 bytes|
|attributes |JSON object  |Recipient list attribute object  |no  |This JSON object allows users to store arbitrary metadata related to this list.  This data is not used by the API.  It is only for the user. |
|recipients |JSON array  |Array of recipient objects |yes |For a full description, see the Recipient Attributes. |

### Recipient Attributes

Recipients are described in a JSON array with the following fields:

| Field         | Type     | Description                           | Required   | Notes   |
|------------------------|:-:       |---------------------------------------|-------------|--------|
|address | JSON object or string | Address information for a recipient  | yes | See the Address Attributes. |
|return_path | string |Email to use for envelope FROM ( **Note:** SparkPost Elite only )| no | To support Variable Envelope Return Path (VERP), this field provides a specific recipient a unique envelope MAIL FROM. |
|tags | JSON array |Array of text labels associated with a recipient | no | Tags are available in Webhook events.  Maximum number of tags - 10 per recipient, 100 system wide.  Any tags over the limits are ignored.|
|metadata | JSON object| Key/value pairs associated with a recipient |no | Metadata is available during events through the Webhooks and is provided to the substitution engine.  A maximum of 1000 bytes of merged metadata (transmission level + recipient level) is available with recipient metadata taking precedence over transmission metadata when there are conflicts.  |
|substitution_data | JSON object | Key/value pairs associated with a recipient that are provided to the substitution engine |no | Recipient substitution data takes precedence over transmission substitution data.  Unlike metadata, substitution data is not included in Webhook events.|

#### Address Attributes
If the "address" field is a string type, it is interpreted as the email address.  If it is a JSON
object, it is described with the following fields:  

| Field         | Type     | Description                           | Required   |
|------------------------|:-:       |---------------------------------------|-------------|
|email    |string       |Valid email address   |yes  |
|name |string |User-friendly name for the email address |no |
|header_to|string       |Email address to display in the "To" header instead of _address.email_ (for BCC)|no|

**Constructing Headers using the Address Attributes**

The _address.email_ attribute is used as the envelope RCPT TO value.

If the address attribute is specified as a JSON string instead of a JSON address object, the address JSON string is used as the envelope RCPT TO value.

The _address.name_ attribute, in conjuction with the _address.email_ attribute, is used to construct the
content "To" header.

`To: "address.name" <address.email>`

If the _address.name_ attribute is not specified, the "To" header uses the _address.email_ attribute in contructing the header.

`To: address.email`

If the address is specified as a JSON string instead of a JSON address object, the "To" header is constructed using the address JSON string.

`To: address`

If the _address.header_to_ attribute is specified, then the "To" header uses
the _address.header_to_ attribute in constructing the header.
_address.header_to_ can be used to BCC (blind carbon copy) recipients,
by hiding the envelope RCPT TO address and replacing it
with an alternative address in the "To" header.

`To: address.header_to`

or:

`To: "address.name" <address.header_to>`

The "To" header is only constructed for messages built from email part content.  The "To" header is not built for email_rfc822 content.

## Create [/recipient-lists{?num_rcpt_errors}]

### Create a Recipient List [POST]

Create a recipient list by providing a **recipient list object** as the POST request body.

At a minimum, the "recipients" array is required, which must contain a valid "address".  If the
recipient list "id" is not provided in the POST request body, one will be generated and returned
in the results body.  Use the **num_rcpt_errors** parameter to limit the number of recipient errors
returned.

**Note:** The "return_path" in the POST request body applies to SparkPost Elite only.

+ Parameters
  + num_rcpt_errors (optional, number, `3`) ... Maximum number of recipient errors that this call can return, otherwise all validation errors are returned.

+ Request (application/json)

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
    + Body

        ```
        {
          "id": "unique_id_4_graduate_students_list",
          "name": "graduate_students",
          "description": "An email list of graduate students at UMBC",
          "attributes": {
              "internal_id": 112,
              "list_group_id": 12321
          },
          "recipients": [
              {
                  "return_path": "return-path-wilmaflin@tstone.com",
                  "address": {
                      "email": "wilmaflin@yahoo.com",
                      "name": "Wilma"
                  },
                  "metadata": {
                      "place": "Bedrock"
                  },
                  "substitution_data": {
                      "subrcptkey": "subrcptvalue"
                  },
                  "tags": [
                      "greeting",
                      "prehistoric",
                      "fred",
                      "flintstone"
                  ]
              },
              {
                  "return_path": "return-path-abc@tstone.com",
                  "address": {
                      "email": "abc@flintstone.com",
                      "name": "ABC"
                  },
                  "metadata": {
                      "place": "MD"
                  },
                  "tags": [
                      "driver",
                      "computer science",
                      "fred",
                      "flintstone"
                  ]
              },
              {
                  "return_path": "return-path-def@tstone.com",
                   "address": {
                      "email": "fred.jones@flintstone.com",
                      "name": "Grad Student Office",
                      "header_to": "grad-student-office@flintstone.com"
                  },
                  "tags": [
                      "driver",
                      "computer science",
                      "fred",
                      "flintstone"
                  ]
              }
          ]
        }
        ```

+ Response 200 (application/json)

  + Body

        ```
        {
        "results": {
            "total_rejected_recipients": 0,
            "total_accepted_recipients": 3,
            "id": "unique_id_4_graduate_students_list",
            "name": "graduate_students"
        }
        }
        ```

+ Response 400 (application/json)

  + Body

        ```
        {
          "errors": [
            {
              "message": "At least one valid recipient is required",
              "code": "5002"
            }
          ]
        }
        ```

+ Response 400 (application/json)

  + Body

        ```
        {
          "errors": [
            {
              "message": "List already exists",
              "code": "5001",
              "description": "List 'unique_id_4_graduate_students_list' already exists"
            }
          ]
        }
        ```

+ Response 422 (application/json)

  + Body

        ```
        {
          "errors": [
            {
              "message": "invalid data format/type",
              "code": "1300",
              "description": "List id 'rcptlist_id_students_list' cannot start with 'rcptlist_'"
            }
          ]
        }
        ```


## Retrieve [/recipient-lists/{id}{?show_recipients}]

### Retrieve a Recipient List [GET]

Retrieve details about a specified recipient list by specifying its id in the URI path.  To
retrieve the recipients contained in a list, the list must be specified and the **show_recipients** parameter must be set to true.

**Note:** The "return_path" in the POST request body applies to SparkPost Elite only.

+ Parameters
    + id (required, string, `unique_id_4_graduate_students`) ... Identifier of the recipient list
    + show_recipients (optional, boolean, `true`) ... If set to true, return attributes for all recipients.
                                              If not specified, return only recipient list attributes.

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json)

    + Body

        ```
        {
            "results": {
                "id": "unique_id_4_graduate_students_list",
                "name": "graduate_students",
                "description": "An email list of graduate students at UMBC",
                "attributes": {
                    "internal_id": 112,
                    "list_group_id": 12321
                },
                "total_accepted_recipients": 2,
                "recipients": [
                    {
                        "address": {
                            "email": "wilmaflin@yahoo.com",
                            "name": "Wilma"
                        },
                        "return_path": "return-path-wilmaflin@tstone.com",
                        "tags": [
                            "greeting",
                            "prehistoric",
                            "fred",
                            "flintstone"
                        ],
                        "metadata": {
                            "place": "Bedrock"
                        },
                        "substitution_data": {
                            "subrcptkey": "subrcptvalue"
                        }
                    },
                    {
                        "address": {
                            "email": "abc@flintstone.com",
                            "name": "ABC"
                        },
                        "return_path": "return-path-abc@tstone.com",
                        "tags": [
                            "driver",
                            "computer science",
                            "fred",
                            "flintstone"
                        ],
                        "metadata": {
                            "place": "MD"
                        }
                    }
                ]
            }
        }
        ```

+ Response 404 (application/json)

  + Body

        ```
          {
            "errors": [
              {
                "message": "resource not found",
                "code": "1600",
                "description": "List 'unique_id_4_graduate_students_list' does not exist"
              }
            ]
          }
        ```

## List [/recipient-lists]

### List all Recipient Lists [GET]

List a summary of all recipient lists.  The recipients for each list are not included in the
results.  To retrieve recipient details, use the RETRIEVE API for a specified recipient list.

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json)

    + Body

        ```
        {
        "results": [
            {
                "id": "unique_id_4_graduate_students_list",
                "name": "graduate_students",
                "description": "An email list of graduate students at UMBC",
                "attributes": {
                    "internal_id": 112,
                    "list_group_id": 12321
                },
                "total_accepted_recipients": 2
            },
            {
                "id": "unique_id_4_undergraduates",
                "name": "undergraduate_students",
                "description": "An email list of undergraduate students at UMBC",
                "attributes": {
                    "internal_id": 111,
                    "list_group_id": 11321
                },
                "total_accepted_recipients": 8
            }
        ]
        }
        ```

## Update [/recipient-lists/{id}{?num_rcpt_errors}]

### Update a Recipient List [PUT]

Update an existing recipient list by specifying its ID in the URI path and use a
**recipient list object** as the PUT request body. Use the **num_rcpt_errors** parameter to limit the number of recipient errors
returned.

The following are key points about updating your recipient lists:

* If a non-scheduled transmission contains a recipient list, the recipient list cannot
be updated if the transmission is submitted or generating.
* If a scheduled transmission contains a recipient list, the recipient list cannot be updated if the transmission is
generating or submitted and within 10 minutes of the scheduled generation time.  
* The "id" field is read only and cannot be changed.  If the recipient list "id" is provided in
the **recipient list object**, it must match the id parameter.
* If a "recipients" array is provided in the update request, it must contain the complete recipient
list and all relevant recipient fields whether they are being changed or not.  The new recipients
will completely replace the existing recipients.  The number of accepted recipients and the
number of rejected recipients will only be returned if a "recipients" array is provided in the request.
* If a "name" field is provided in the update request, it will replace the existing
"name" field for the recipient list.
* If a "description" field is provided in the update request, it will replace the existing
"description" field for the recipient list.
* If an "attributes" object is provided in the update request, it will completely replace the existing
"attributes" object for the recipient list.

+ Parameters
  + id (required, string, `unique_id_4_graduate_students_list`) ... Identifier of the recipient list
  + num_rcpt_errors (optional, number, `3`) ... Maximum number of recipient errors that this call can return, otherwise all validation errors are returned.

+ Request (application/json)

  + Headers
            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

  + Body

        ```
          {
              "name": "updated_graduate_students",
              "description": "An email list of graduate students at UMBC",
              "attributes": {
                  "internal_id": 112,
                  "list_group_id": 12321
              },
              "recipients": [
                  {
                      "address": {
                          "email": "wilmaflin@yahoo.com",
                          "name": "Wilma"
                      },
                      "metadata": {
                          "place": "Bedrock"
                      },
                      "substitution_data": {
                          "subrcptkey": "subrcptvalue"
                      },
                      "tags": [
                          "greeting",
                          "prehistoric",
                          "fred",
                          "flintstone"
                      ]
                  },
                  {
                      "address": {
                          "email": "fred.jones@flintstone.com",
                          "name": "Grad Student Office",
                          "header_to": "grad-student-office@flintstone.com"
                      },
                      "tags": [
                          "driver",
                          "computer science",
                          "fred",
                          "flintstone"
                      ]
                  }
              ]
          }
        ```

+ Response 200 (application/json)

  + Body

        ```
        {
            "results": {
                "total_rejected_recipients": 0,
                "total_accepted_recipients": 2,
                "id": "unique_id_4_graduate_students_list",
                "name": "updated_graduate_students"
            }
        }
        ```

+ Response 400 (application/json)

  + Body

        ```
          {
            "errors": [
              {
                "message": "invalid uri",
                "code": "1101",
                "description": "PUT requires a recipient list id in the URI"
              }
            ]
          }
        ```

+ Response 400 (application/json)

  + Body

        ```
          {
            "errors": [
              {
                "message": "At least one valid recipient is required",
                "code": "5002"
              }
            ]
          }
        ```

+ Response 404 (application/json)

  + Body

        ```
          {
            "errors": [
              {
                "message": "resource not found",
                "code": "1600",
                "description": "List 'unique_id_4_graduate_students_list' does not exist"
              }
            ]
          }
        ```

+ Response 409 (application/json)

  + Body

        ```
          {
            "errors": [
              {
                "message": "resource conflict",
                "code": "1602",
                "description": "List 'unique_id_4_graduate_students_list' is in use by msg generation"
              }
            ]
          }
        ```

+ Response 409 (application/json)

  + Body

        ```
          {
            "errors": [
              {
                "message": "resource conflict",
                "code": "1602",
                "description": "List 'unique_id_4_graduate_students_list' is in use by another request"
              }
            ]
          }
        ```

+ Response 422 (application/json)

  + Body

        ```
          {
            "errors": [
              {
                "message": "invalid data format/type",
                "code": "1300",
                "description": "List id 'unique_id_4_graduate_students_list' does not match the list being updated"
              }
            ]
          }
        ```


## Delete [/recipient-lists/{id}]

### Delete a Recipient List [DELETE]

Permanently delete the specified recipient list.

Once a recipient list is deleted, it
cannot be recovered.  Before deleting a list, ensure that it is no longer needed and keep a backup copy.  If a deleted
list is needed again, the list must be resubmitted with the CREATE API.

If a transmission contains a recipient list, the recipient list cannot be deleted if the transmission is
submitted or generating.  

+ Parameters
    + id (required, string, `unique_id_4_graduate_students_list`) ... Identifier of the recipient list

+ Request

  + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

+ Response 200 (application/json)

            {
            }

+ Response 400 (application/json)

  + Body

        ```
          {
            "errors": [
              {
                "message": "invalid uri",
                "code": "1101",
                "description": "DELETE requires a recipient list id in the URI"
              }
            ]
          }
        ```

+ Response 404 (application/json)

  + Body

        ```
          {
            "errors": [
              {
                "message": "resource not found",
                "code": "1600",
                "description": "List 'unique_id_4_graduate_students_list' does not exist"
              }
            ]
          }
        ```

+ Response 409 (application/json)

  + Body

        ```
          {
            "errors": [
              {
                "message": "resource conflict",
                "code": "1602",
                "description": "List 'unique_id_4_graduate_students_list' is in use by msg generation"
              }
            ]
          }
        ```

# Group Relay Webhooks

**Note:** The Relay Webhooks API is available for SparkPost only.

By configuring a relay webhook for a specified inbound domain, those inbound messages can be forwarded to a specified target over HTTP.  Before you create a relay webhook, be sure to first create an inbound domain that is properly configured. To create an inbound domain for your account, please contact <support@sparkpost.com>. The Relay Webhooks API provides the means to create, list, retrieve, update, and delete a relay webhook.

## Relay Webhooks Object Properties

| Property  | Type   | Description                          | Required | Notes 
|-----------|--------|--------------------------------------|----------|----------------------|
| name      | string | User-friendly name                   | no       | example: `Inbound Customer Replies` |
| target    | string | URL of the target to which to POST relay batches | yes | example: `https://webhooks.customer.example/replies` |
| auth_token | string | Authentication token to present in the X-MessageSystems-Webhook-Token header of POST requests to target | no | Use this token in your target application to confirm that data is coming from the Relay Webhooks API. example: `5ebe2294ecd0e0f08eab7690d2a6ee69` |
| match     | object | Restrict which inbound messages will be relayed to the target | yes | See Match Object Properties. example: `"match": { "protocol": "SMTP", "domain": "replies.customer.example" }` |

### Match Object Properties

| Property  | Type   | Description                                                 | Required               | Notes 
|-----------|--------|-----------------------------------------------------------------------|--------------|----------------------|
| protocol  | string | Inbound messaging protocol associated with this webhook | no - defaults to "SMTP" |                      |
| domain    | string | Inbound domain associated with this webhook             | yes | To create an inbound domain for your account, please contact <support@sparkpost.com>. |

## Field Defintions

The following fields will be included in the JSON object posted to the relay webhooks target:

| Field     | Type   | Description                                                 | Notes
|-----------|--------|-----------------------------------------------------------------------|--------------|----------------------|
| content   | object | Content that will be used to construct a relay message           | For a full description, see the Content Attributes. |
| friendly_from | string | Email address used to compose the "From" header |
| msg_from | string | SMTP envelope from |
| rcpt_to | string | SMTP envelope to |
| webhook_id | string | ID of the relay webhook which triggered this relay message |

### Content Attributes

Content for a relay webhook is described in a JSON object with the following fields:

| Field     | Type   | Description                                                 | Notes
|-----------|--------|-------------------------------------------------------------|----------------|
| html      | string | Contents of the first text/html part of the message |
| text      | string | Contents of the first text/plain part of the message |
| subject   | string | "Subject" header value (decoded from email) |
| to        | array of strings | "To" header value (decoded from email), RFC2822 address list |
| cc        | array of strings | "CC" header value (decoded from email), RFC2822 address list |
| headers   | array of objects | Ordered array of email top-level headers | This array preserves ordering and allows for multiple occurrences of a header (e.g.: to support trace headers such as "Received"). |
| email_rfc822 | string | Raw MIME content for an email | If the Raw MIME content contains at least one non UTF-8 encoded character, the entire "email_rfc822" JSON value will be base64 encoded and the "email_rfc822_is_base64" JSON boolean value will be set to true |
| email_rfc822_is_base64 | boolean | Whether or not the "email_rfc822" value is base64 encoded |



## Create and List [/relay-webhooks]

### Create a Relay Webhook [POST]

Create a relay webhook by providing a **relay webhooks object** as the POST request body.

+ Request (application/json)

  + Headers

      Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

  + Body

            {
              "name": "Replies Webhook",
              "target": "https://webhooks.customer.example/replies",
              "auth_token": "",
              "match":
                {
                  "protocol": "SMTP",
                  "domain": "email.example.com"
                }
            }

+ Response 200 (application/json)

  + Body

            {
              "results":
                {
                  "id": "12013026328707075"
                }
            }

+ Response 400 (application/json)

  + Body

          { "errors": [
              {
                "message": "invalid params",
                "description": "Domain '(domain)' is not a registered inbound domain",
                "code": "1200"
              }
            ]
          }

+ Response 401 (application/json)

  + Body

          { "errors": [
              {
                "message": "Unauthorized Tenant",
                "code": "1303"
              }
            ]
          }

+ Response 409 (application/json)

  + Body

          { "errors": [
              {
                "message": "resource conflict",
                "description": "Domain '(domain)' is already in use",
                "code": "1602"
              }
            ]
          }

+ Response 422 (application/json)

  + Body

            {
              "errors" : [
                {
                  "message" : "required field is missing",
                  "description" : "field '(field_name)' is required",
                  "code" : "1400"
                }
              ]
            }

+ Response 422 (application/json)

  + Body

            {
              "errors" : [
                {
                  "message": "invalid data format/type",
                  "description": "Error validating domain name syntax for domain: '(domain)'",
                  "code": "1300"
                }
              ]
            }

### List all Relay Webhooks [GET]

List all your relay webhooks.

+ Request

  + Headers
      Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
      Accept: application/json

+ Response 200 (application/json)

  + Body
         { "results": [
              {
                "id": "12013026328707075",
                "name": "Replies Webhook",
                "target": "https://webhooks.customer.example/replies",
                "auth_token": "",
                "match":
                  {
                    "protocol": "SMTP",
                    "domain": "email.example.com"
                  }
              }
            ]
          }

+ Response 401 (application/json)

  + Body
          {
            "errors": [
              {
                "message": "Unauthorized Tenant",
                "code": "1303"
              }
            ]
          }

## Retrieve, Update, and Delete [/relay-webhooks/{webhook_id}]

### Retrieve a Relay Webhook [GET]

Retrieve a specific relay webhook by specifying the webhook ID in the URI path.

+ Parameters
  + webhook_id (required, string, `12013026328707075`) ... Webhook ID

+ Request

  + Headers
      Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
      Accept: application/json

+ Response 200 (application/json)

  + Body
         {
            "results": {
              "name": "Replies Webhook",
              "target": "https://webhooks.customer.example/replies",
              "auth_token": "",
              "match": {
                  "protocol": "SMTP",
                  "domain": "email.example.com"
              }
            }
         }

+ Response 401 (application/json)

  + Body
          {
            "errors": [
              {
                "message": "Unauthorized Tenant",
                "code": "1303"
              }
            ]
          }

+ Response 404 (application/json)

  + Body
          {
            "errors": [
              {
                "message": "resource not found",
                "code": "1600"
              }
            ]
          }

### Update a Relay Webhook [PUT]

Update a relay webhook by specifying the webhook ID in the URI path.

+ Parameters
  + webhook_id (required, string, `12013026328707075`) ... Webhook ID

+ Request (application/json)

  + Headers
      Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

  + Body

            {
              "name": "New Replies Webhook",
              "target": "https://webhook.customer.example/replies"
            }

+ Response 200 (application/json)

  + Body

            {
              "results":
                {
                  "id": "12013026328707075"
                }
            }

+ Response 400 (application/json)

  + Body
          {
            "errors": [
              {
                "message": "invalid params",
                "description": "Domain ('domain') is not a registered inbound domain",
                "code": "1200"
              }
            ]
          }

+ Response 401 (application/json)

  + Body
          {
            "errors": [
              {
                "message": "Unauthorized Tenant",
                "code": "1303"
              }
            ]
          }

+ Response 404 (application/json)

  + Body
          {
            "errors": [
              {
                "message": "resource not found",
                "description": "UPDATE requires a webhook_id in the URI",
                "code": "1600"
              }
            ]
          }

+ Response 404 (application/json)

  + Body
          {
            "errors": [
              {
                "message": "resource not found",
                "code": "1600"
              }
            ]
          }

+ Response 409 (application/json)

  + Body

          { "errors": [
              {
                "message": "resource conflict",
                "description": "Domain '(domain)' is already in use",
                "code": "1602"
              }
            ]
          }

+ Response 422 (application/json)

  + Body

            {
              "errors" : [
                {
                  "message": "invalid data format/type",
                  "description": "Error validating domain name syntax for domain: '(domain)'",
                  "code": "1300"
                }
              ]
            }

### Delete a Relay Webhook [DELETE]

Delete a relay webhook by specifying the webhook ID in the URI path.

+ Parameters
  + webhook_id (required, string, `12013026328707075`) ... Webhook ID

+ Request

  + Headers
      Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

+ Response 200

+ Response 401 (application/json)

  + Body
          {
            "errors": [
              {
                "message": "Unauthorized Tenant",
                "code": "1303"
              }
            ]
          }

+ Response 404 (application/json)

  + Body
          {
            "errors": [
              {
                "message": "resource not found",
                "description": "DELETE requires a webhook_id in the URI",
                "code": "1600"
              }
            ]
          }

+ Response 404 (application/json)

  + Body
          {
            "errors": [
              {
                "message": "resource not found",
                "code": "1600"
              }
            ]
          }

# Group Sending Domains

**Note:** The Sending Domains API has reduced functionality in SparkPost Elite.

A sending domain is a domain that is used to indicate who an email is from via the "From:" header. Using a custom sending domain enables you to control what recipients see as the From value in their email clients. DNS records can be configured for a sending domain, which allows recipient mail servers to authenticate your messages. The Sending Domains API provides the means to create, list, retrieve, update, and verify a custom sending domain.

## Sending Domains in SparkPost Elite

In SparkPost Elite, the Sending Domains API can only be used to associate a tracking domain with a sending domain. None of the other attributes are currently used in SparkPost Elite.

It is currently optional to register a sending domain with the Sending Domains API in SparkPost Elite. Sending domains are not currently verified in SparkPost Elite, and it is currently possible to send from an unverified sending domain.

## Sending Domain Attributes

**Note:** "dkim" is currently ignored in SparkPost Elite. "status" will not currently affect whether messages can be sent from a sending domain in SparkPost Elite.

| Field         | Type     | Description                           | Required   | Notes   |
|------------------------|:-:       |---------------------------------------|-------------|--------|
|domain    |string  |Name of the sending domain   | yes |The domain name will be used as the "From:" header address in the email.|
|tracking_domain | string | Associated tracking domain | no | example: "click.example1.com" |
|status | JSON object| JSON object containing status details, including whether this domain's ownership has been verified  | no | Read only. For a full description, see the Status Attributes.|
|dkim | JSON object| JSON object in which DKIM key configuration is defined|no| For a full description, see the DKIM Attributes.|

### DKIM Attributes

**Note:** "dkim" is currently ignored in SparkPost Elite. DKIM keypairs are currently configured by the Operations team. DKIM keys that are specified via the API are not currently used.

DKIM uses a pair of public and private keys to authenticate your emails. The DKIM key configuration is described in a JSON object with the following fields:

| Field         | Type     | Description                           | Required   | Notes   |
|------------------------|:-:       |---------------------------------------|-------------|--------|
|private | string | DKIM private key | yes | The private key will be used to create the DKIM Signature.|
|public | string |DKIM public key  | yes | The public key will be retrieved from DNS of the sending domain.|
|selector | string |DomainKey selector | yes | The DomainKey selector will be used to indicate the DKIM public key location.|
|headers | string| Header fields to be included in the DKIM signature |no | Header fields are separated by a colon.  Example: `"from:to:subject:date"`|

### Status Attributes

**Note:** SparkPost Elite does not currently verify sending domains. The verification status of a sending domain will not affect sending. It is currently possible to send from an unverified domain in SparkPost Elite.

Detailed status for this sending domain is described in a JSON object with the following fields:

| Field         | Type     | Description                           | Default   | Notes   |
|------------------------|:-:       |---------------------------------------|-------------|--------|
|ownership_verified | boolean | Whether domain ownership has been verified |false |Read only. This field will return "true" if any of dkim_status, spf_status, abuse_at_status, or postmaster_at_status are "true".|
|dkim_status | string | Verification status of DKIM configuration |unverified|Read only. Valid values are "unverified", "pending", "invalid" or "valid".|
|spf_status | string | Verification status of SPF configuration |unverified |Read only. Valid values are "unverified", "pending", "invalid" or "valid".|
|abuse_at_status | string | Verification status of abuse@ mailbox |unverified |Read only. Valid values are "unverified", "pending", "invalid" or "valid".|
|postmaster_at_status | string | Verification status of postmaster@ mailbox |unverified |Read only. Valid values are "unverified", "pending", "invalid" or "valid".|
|compliance_status | string | Compliance status | | Valid values are "pending", "valid", or "blocked".|

### Verify Attributes

These are the valid request options for verifying a Sending Domain:

| Field         | Type     | Description                           | Required  |
|------------------------|:-:       |---------------------------------------|-------------|
|dkim_verify | boolean | Request verification of DKIM record | no |
|spf_verify | boolean | Request verification of SPF record | no |

### DNS Attributes

| Field         | Type     | Description                           |
|------------------------|:-:       |---------------------------------------|
|dkim_record | string | DNS DKIM record for the registered Sending Domain |
|spf_record | string | DNS SPF record for the registered Sending Domain |
|dkim_error | string | Error message describing reason for DKIM verification failure |
|spf_error | string | Error message describing reason for SPF verification failure |

## Create and List [/sending-domains]

### Create a Sending Domain [POST]

Create a sending domain by providing a **sending domain object** as the POST request body.

+ Request (application/json)

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

    + Body

        ```
        {
            "domain" : "example1.com",
            "tracking_domain" : "click.example1.com",
            "dkim" : {  "private" : "MIICXgIBAAKBgQC+W6scd3XWwvC/hPRksfDYFi3ztgyS9OSqnnjtNQeDdTSD1DRx/xFar2wjmzxp2+SnJ5pspaF77VZveN3P/HVmXZVghr3asoV9WBx/uW1nDIUxU35L4juXiTwsMAbgMyh3NqIKTNKyMDy4P8vpEhtH1iv/BrwMdBjHDVCycB8WnwIDAQABAoGBAITb3BCRPBi5lGhHdn+1RgC7cjUQEbSb4eFHm+ULRwQ0UIPWHwiVWtptZ09usHq989fKp1g/PfcNzm8c78uTS6gCxfECweFCRK6EdO6cCCr1cfWvmBdSjzYhODUdQeyWZi2ozqd0FhGWoV4VHseh4iLj36DzleTLtOZj3FhAo1WJAkEA68T+KkGeDyWwvttYtuSiQCCTrXYAWTQnkIUxduCp7Ap6tVeIDn3TaXTj74UbEgaNgLhjG4bX//fdeDW6PaK9YwJBAM6xJmwHLPMgwNVjiz3u/6fhY3kaZTWcxtMkXCjh1QE82KzDwqyrCg7EFjTtFysSHCAZxXZMcivGl4TZLHnydJUCQQCx16+M+mAatuiCnvxlQUMuMiSTNK6Amzm45u9v53nlZeY3weYMYFdHdfe1pebMiwrT7MI9clKebz6svYJVmdtXAkApDAc8VuR3WB7TgdRKNWdyGJGfoD1PO1ZE4iinOcoKV+IT1UCY99Kkgg6C7j62n/8T5OpRBvd5eBPpHxP1F9BNAkEA5Nf2VO9lcTetksHdIeKK+F7sio6UZn0Rv7iUo3ALrN1D1cGfWIh2dj3ko1iSreyNVSwGW0ePP27qDmU+u6/Y1g==",
                "public" : "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC+W6scd3XWwvC/hPRksfDYFi3ztgyS9OSqnnjtNQeDdTSD1DRx/xFar2wjmzxp2+SnJ5pspaF77VZveN3P/HVmXZVghr3asoV9WBx/uW1nDIUxU35L4juXiTwsMAbgMyh3NqIKTNKyMDy4P8vpEhtH1iv/BrwMdBjHDVCycB8WnwIDAQAB",
                "selector" : "brisbane",
                "headers" : "from:to:subject:date"
            }
        }
        ```

+ Response 200 (application/json; charset=utf-8)

        {
            "results" : {
                "message" : "Successfully Created domain.",
                "domain"  : "example1.com"

            }
        }

+ Response 400 (application/json)

      { 
        "errors": [
          {
            "message": "invalid params",
            "description": "Tracking domain '(domain)' is not a registered tracking domain",
            "code": "1200"
          }
        ]
      }

+ Response 422 (application/json)

    {
      "errors" : [
        {
          "message": "invalid data format/type",
          "description": "Error validating domain name syntax for domain: '(domain)'",
          "code": "1300"
        }
      ]
    }

### List all Sending Domains [GET]

List an overview of all sending domains in the system.

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json; charset=utf-8)

        {
            "results" : [
                {
                    "domain": "example1.com",
                    "tracking_domain": "click.example1.com"
                },
                {
                    "domain": "example2.com"
                }
            ]
        }

## Retrieve, Update, and Delete [/sending-domains/{domain}]

### Retrieve a Sending Domain [GET]

Retrieve a sending domain by specifying its domain name in the URI path.  The response includes details about its DKIM key configuration.

+ Parameters
  + domain (required, string, `example1.com`) ... Name of the domain

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json; charset=utf-8)

        {
            "results": {
                "tracking_domain": "click.example1.com",
                "status": {
                    "ownership_verified": false,
                    "spf_status": "pending",
                    "abuse_at_status": "pending",
                    "dkim_status": "pending",
                    "compliance_status": "pending",
                    "postmaster_at_status": "pending"
                },
                "dkim": {
                    "headers": "from:to:subject:date",
                    "public": "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC+W6scd3XWwvC/hPRksfDYFi3ztgyS9OSqnnjtNQeDdTSD1DRx/xFar2wjmzxp2+SnJ5pspaF77VZveN3P/HVmXZVghr3asoV9WBx/uW1nDIUxU35L4juXiTwsMAbgMyh3NqIKTNKyMDy4P8vpEhtH1iv/BrwMdBjHDVCycB8WnwIDAQAB",
                    "selector": "hello_selector"
                }
            }
        }


### Update a Sending Domain [PUT]

Update the attributes of an existing sending domain by specifying its domain name in the URI path and use a **sending domain object** as the PUT request body.

If a tracking domain is specified, it will replace any currently specified tracking domain.  If the supplied tracking domain is a blank string, it will clear any currently specified tracking domain. Note that if a tracking domain is not specified, any currently specified tracking domain will remain intact.

If a dkim object is provided in the update request, it must contain all relevant fields whether they are being changed or not.  The new dkim object will completely overwrite the existing one.

+ Parameters
    + domain (required, string, `example1.com`) ... Name of the domain

+ Request (application/json)

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

    + Body

        ```
        {
            "tracking_domain": "click.example1.com",
            "dkim" : {  "private" : "MIICXgIBAAKBgQC+W6scd3XWwvC/hPRksfDYFi3ztgyS9OSqnnjtNQeDdTSD1DRx/xFar2wjmzxp2+SnJ5pspaF77VZveN3P/HVmXZVghr3asoV9WBx/uW1nDIUxU35L4juXiTwsMAbgMyh3NqIKTNKyMDy4P8vpEhtH1iv/BrwMdBjHDVCycB8WnwIDAQABAoGBAITb3BCRPBi5lGhHdn+1RgC7cjUQEbSb4eFHm+ULRwQ0UIPWHwiVWtptZ09usHq989fKp1g/PfcNzm8c78uTS6gCxfECweFCRK6EdO6cCCr1cfWvmBdSjzYhODUdQeyWZi2ozqd0FhGWoV4VHseh4iLj36DzleTLtOZj3FhAo1WJAkEA68T+KkGeDyWwvttYtuSiQCCTrXYAWTQnkIUxduCp7Ap6tVeIDn3TaXTj74UbEgaNgLhjG4bX//fdeDW6PaK9YwJBAM6xJmwHLPMgwNVjiz3u/6fhY3kaZTWcxtMkXCjh1QE82KzDwqyrCg7EFjTtFysSHCAZxXZMcivGl4TZLHnydJUCQQCx16+M+mAatuiCnvxlQUMuMiSTNK6Amzm45u9v53nlZeY3weYMYFdHdfe1pebMiwrT7MI9clKebz6svYJVmdtXAkApDAc8VuR3WB7TgdRKNWdyGJGfoD1PO1ZE4iinOcoKV+IT1UCY99Kkgg6C7j62n/8T5OpRBvd5eBPpHxP1F9BNAkEA5Nf2VO9lcTetksHdIeKK+F7sio6UZn0Rv7iUo3ALrN1D1cGfWIh/Y1g==",
                "public" : "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC+W6scd3XWwvC/hPRksfDYFi3ztgyS9OSqnnjtNQeDdTSD1DRx/xFar2wjmzxp2+SnJ5pspaF77VZveN3P/HVmXZVghr3asoV9WBx/uW1nDIUxU35L4juXiTwsMAbgMyh3NqIKTNKyMDy4P8vpEhtH1iv/BrwMdBjHDVCycB8WnwIDAQAB",
                "selector" : "hello_selector",
                "headers" : "from:to:subject:date"
            }
        }
        ```

+ Response 200 (application/json; charset=utf-8)

        {
            "results" : {
                "message" : "Successfully Updated Domain.",
                "domain" : "example1.com"
            }
        }

+ Response 400 (application/json)

      {
        "errors": [
          {
            "message": "invalid params",
            "description": "Tracking domain '(domain)' is not a registered tracking domain",
            "code": "1200"
          }
        ]
      }

+ Response 422 (application/json)

    {
      "errors" : [
        {
          "message": "invalid data format/type",
          "description": "Error validating domain name syntax for domain: '(domain)'",
          "code": "1300"
        }
      ]
    }

### Delete a Sending Domain [DELETE]

Delete an existing sending domain.

**Warning:** Before deleting a sending domain please ensure you are no longer using it. After deleting a sending domain, any new transmissions that use it will result in a rejection. This includes any transmissions that are in progress, scheduled for the future, or use a stored template referencing the sending domain.

+ Parameters
  + domain (required, string, `example1.com`) ... Name of the domain

+ Request

  + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

+ Response 204

+ Response 404 (application/json)

  + Body

            {
              "errors": [
                {
                  "code": "1600",
                  "message": "resource not found",
                  "description": "Domain 'wrong.domain' does not exist"
                }
              ]
            }


## Verify [/sending-domains/{domain_name}/verify]

### Verify a Sending Domain [POST]

**Note:** While it is possible to call this endpoint in SparkPost Elite, the verification status of a sending domain will not affect sending. It is currently possible to send from an unverified domain in SparkPost Elite.

The verify resource validates the specified verification field types. Including the fields "dkim_verify" and "spf_verify" in the request initiates a check against the associated DNS record type for the specified sending domain. The domain's "status" object is returned on success.

+ Request (application/json)

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
    + Body

        ```
        {
            "dkim_verify" : true,
            "spf_verify"  : true
        }
        ```


+ Response 200 (application/json; charset=utf-8)

        {
            "results": {
                "ownership_verified": true,
                "spf_status": "valid",
                "dns": {
                    "dkim_record": "k=rsa; h=sha256; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC+W6scd3XWwvC/hPRksfDYFi3ztgyS9OSqnnjtNQeDdTSD1DRx/xFar2wjmzxp2+SnJ5pspaF77VZveN3P/HVmXZVghr3asoV9WBx/uW1nDIUxU35L4juXiTwsMAbgMyh3NqIKTNKyMDy4P8vpEhtH1iv/BrwMdBjHDVCycB8WnwIDAQAB",
                    "spf_record": "v=spf1 include:sparkpostmail.com ~all"
                },
                "compliance_status": "pending",
                "dkim_status": "valid",
                "abuse_at_status": "unverified",
                "postmaster_at_status": "unverified"
            }
        }

# Group Suppression List

A suppression list - or exclusion list, as it is sometimes called - stores a recipient's opt-out preferences. It is a list of recipient email addresses to which you do NOT want to send email. The Suppression List API is used to manage your customer-specific exclusion list entries.  An entry indicates whether the recipient requested to receive one of the following:

* Transactional and non-transactional messages from a given customer
* Transactional messages only from a given customer
* Non-transactional messages only from a given customer
* No messages from a given customer

Transactional messages are single recipient messages that are used operationally, e.g. to reset a password or confirm a purchase; while non-transactional messages are used to run email campaigns where a list of recipients are targeted, e.g. advertising a sales event.

In addition to the customer-specific exclusion list, Message Systems maintains a global suppression list across all customers.

## List Entry Attributes
| Field         | Type     | Description                           | Required   | Notes   |
|------------------------|:-:       |---------------------------------------|-------------|--------|
|transactional | boolean | Whether the recipient requested to not receive any transactional messages | At a minimum, transactional or non_transactional is required upon creation of the entry. | |
|non_transactional | boolean | Whether the recipient requested to not receive any non-transactional messages | At a minimum, transactional or non_transactional is required upon creation of the entry. |  |
|source | string | Source responsible for inserting the list entry. Valid values include: `FBL`, `List Unsubscribe`, `Bounce Rule`, `Unsubscribe Link`, `Manually Added`, `Compliance`| no - defaults to `Manually Added` on create | Field is read-only  |
|description | string | Short explanation of the suppression | no | |


## Bulk Insert/Update [/suppression-list/]

### Insert or Update List Entries [PUT]

Bulk insert or update entries in the customer-specific exclusion list by providing a JSON object, with a "recipients" key containing an array of recipients to insert or update, as the PUT request body. Maximum size of the JSON object is 50mb. At a minimum, each recipient must have a valid "email" address and at least one of the following keys: "transactional" or "non_transactional". The optional "description" key can be used to include an explanation of what type of message should be suppressed. 

If the recipient entry was added to the list by Compliance, it cannot be updated.
 
If an email address is duplicated in a single request, only the first instance will be processed.

+ Request (application/json)

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
    + Body

        ```
        {
        "recipients": [
          {
            "email": "rcpt_1@example.com",
            "transactional": true,
            "description": "User requested to not receive any transactional emails."
          },
          {
            "email": "rcpt_2@example.com",
            "non_transactional": true
              }
            ]
        }
        ```

+ Response 400 (application/json; charset=utf-8)

        {
            "errors": [
                {
                    "message": "transactional must be a boolean if present"
                },
                {
                    "message": "Invalid email address: example.com"
                }
            ]
        }

+ Response 500 (application/json; charset=utf-8)

        {
            "errors": [
                {
                    "message": "Unable to update suppression list"
                }
            ]
        }

+ Response 200 (application/json; charset=utf-8)

        {
            "results" :
                {
                    "message": "Suppression List successfully updated"
                }
        }


## Search [/suppression-list{?to,from,types,sources,limit}]

### Search for List Entries [GET]

Perform a filtered search for entries in your customer-specific exclusion list.

+ Parameters
    + to = `now` (optional, datetime, `2014-07-20T09:00:00+0000`) ... Datetime the entries were last updated, in the format of YYYY-MM-DDTHH:mm:ssZ
    + from (optional, datetime, `2014-07-20T09:00:00+0000`) ... Datetime the entries were last updated, in the format YYYY-MM-DDTHH:mm:ssZ
    + types (optional, list) ... Types of entries to include in the search, i.e. entries with "transactional" and/or "non_transactional" keys set to true
    + sources (optional, list) ... Source(s) of the entries to include in the search, i.e. entries that were added by this source
    + limit (optional, int, `5`) ... Maximum number of results to return.  Must be between 1 and 100000. Default value is 100000.

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 500 (application/json; charset=utf-8)

        {
            "errors": [
                {
                    "message": "Unable to perform search"
                }
            ]
        }

+ Response 400 (application/json; charset=utf-8)

        {
            "errors": [
                {
                    "message": "from must be a valid date"
                }
            ]
        }

+ Response 200 (application/json; charset=utf-8)

        {
            "results": [
                {
                    "recipient": "test@example.com",
                    "transactional": false,
                    "non_transactional": true,
                    "source": "Bounce Rule",
                    "description": "550: this email address does not exist #55",
                    "created": "2015-01-01T01:01:01+00:00",
                    "updated": "2015-01-01T01:01:01+00:00"
                }
            ]
        }


## Retrieve, Delete [/suppression-list/{recipient_email}]

### Retrieve a Recipient Suppression Status [GET]

Retrieve the suppression status for a specific recipient by specifying the recipient’s email address in the URI path.

If the recipient is not in the customer-specific exclusion list, an HTTP status of 404 is returned. If the recipient is in the list, an HTTP status of 200 is returned with the full suppression status in the response body.

In addition to the list entry attributes, the response body also includes "created" and "updated" timestamps.

+ Parameters
  + recipient_email (required, string, `rcpt_1@example.com`) ... Recipient email address


+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 404 (application/json; charset=utf-8)

        {
            "errors": [
                {
                    "message": "Recipient could not be found"
                }
            ]
        }

+ Response 200 (application/json; charset=utf-8)

        {
            "results" : [
              {
                "recipient" : "rcpt_1@example.com",
                "transactional" : false,
                "non_transactional" : true,
                "source" : "Manually Added"
                "description" : "User requested to not receive any non-transactional emails.",
                "created" : "2015-01-01T12:00:00.000Z'
                "updated" : "2015-01-01T12:00:00.000Z'
              }
            ]
        }

### Delete a List Entry [DELETE]

Delete a recipient from the list by specifying the recipient's email address in the URI path.

If the recipient is not in the customer-specific exclusion list, an HTTP status of 404 is returned. If the recipient is in the list, an HTTP status of 204 is returned indicating a successful deletion.

+ Parameters
    + recipient_email (required, string, `rcpt_1@example.com`) ... Recipient email address


+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 404 (application/json; charset=utf-8)

        {
            "errors": [
                {
                    "message": "Recipient could not be found"
                }
            ]
        }

+ Response 403 (application/json; charset=utf-8)

        {
            "errors": [
                {
                    "message": "Recipient could not be removed - Compliance"
                }
            ]
        }

+ Response 204 (application/json; charset=utf-8)

### Insert or Update a List Entry [PUT]

The PUT method on this endpoint has been removed in favor of the Bulk Insert/Update method. 

+ Response 405 (application/json; charset=utf-8)

        {
            "errors": [
                {
                    "message": "Method Not Allowed"
                }
            ]
        }
        
# Group Templates

A template is a named collection of content stored on the server side.  Templates are used
in a transmission by providing the id of the template at the time of transmission submission.  Each textual component of the
template (headers, text, and html) is run through the substitution engine
to produce recipient specific email messages.  The Templates API provides the means to manage your templates.

## Template Attributes

| Field         | Type     | Description                           | Required   | Notes   |
|------------------------|:-:       |---------------------------------------|-------------|--------|
|id    |string  |Short, unique, alphanumeric ID used to reference the template   | At a minimum, id or name is required upon creation.  It is auto generated if not provided. |After a template has been created, this property cannot be changed.  Maximum length - 64 bytes   |
|content              |JSON  |Content that will be used to construct a message  |  yes  |  For a full description, see the Content Attributes. Maximum length - 20 MBs  |
|published |boolean |Whether the template is published or is a draft version|no - defaults to false|A template cannot be changed from published to draft.|
|name |string  |Editable display name  | At a minimum, id or name is required upon creation.   |The name does not have to be unique.  Maximum length - 1024 bytes   |
|description |string  |Detailed description of the template  |no    | Maximum length - 1024 bytes |
|options |JSON |JSON object in which template options are defined|no| For a full description, see the Options Attributes.|


### Content Attributes

Content for a template is described in a JSON object with the following fields:

| Field         | Type     | Description                           | Required   | Notes   |
|------------------------|:-:       |---------------------------------------|-------------|--------|
|html    |string  |HTML content for the email's text/html MIME part|At a minimum, html or text is required.  |Expected in the UTF-8 charset with no Content-Transfer-Encoding applied.  Substitution syntax is supported. |
|text    |string  |Text content for the email's text/plain MIME part|At a minimum, html or text is required. |Expected in the UTF-8 charset with no Content-Transfer-Encoding applied.  Substitution syntax is supported.|
|subject |string  |Email subject line   | yes |Expected in the UTF-8 charset without RFC2047 encoding.  Substitution syntax is supported. |
|from |string or JSON  | Address _"from" : "deals@company.com"_ or JSON object composed of the "name" and "email" fields _"from" : { "name" : "My Company", "email" : "deals@company.com" }_ used to compose the email's "From" header| yes | Substitution syntax is supported. |
|reply_to |string  |Email address used to compose the email's "Reply-To" header | no | Substitution syntax is supported. |
|headers| JSON | JSON dictionary containing headers other than "Subject", "From", "To", and "Reply-To"  | no |See the Header Notes. |

#### Header Notes

* Headers such as "Content-Type" and "Content-Transfer-Encoding" are not allowed here as they are auto generated upon construction of the email.
* The "To" header should not be specified here, since it is generated from each recipient's _address.name_ and _address.email_.
* Each header value is expected in the UTF-8 charset without RFC2047 encoding.
* Substitution syntax is supported.

Alternately, the content JSON object may contain a single "email_rfc822" field.  email_rfc822 is mutually exclusive with all of the above fields.

| Field         | Type     | Description                           | Required   | Notes   |
|--------------------|:-:       |---------------------------------------|-----------------------|--------|
|email_rfc822    |string  |Pre-built message with the format as described by the [message/rfc822 Content-Type](http://tools.ietf.org/html/rfc2046#section-5.2.1) |no   |  See the email_rfc822 Notes. |

#### email_rfc822 Notes

* Substitutions will be applied in the top-level headers and the first non-attachment text/plain and
first non-attachment text/html MIME parts only.
* Lone `LF`s and lone `CR`s are allowed. The system will convert line endings to `CRLF` where
necessary.
* The provided email_rfc822 should NOT be dot stuffed.  The system dot stuffs before sending the outgoing message.
* The provided email_rfc822 should NOT contain the SMTP terminator `\r\n.\r\n`.  The system always adds this terminator.
* The provided email_rfc822 in MIME format will be rejected if SparkPost and SparkPost Elite cannot parse the contents into a MIME tree.

### Options Attributes

Options for a template are described in a JSON object with the following fields:

| Field         | Type     | Description                           | Required   | Notes   |
|--------------------|:-:       |---------------------------------------|-------------|------------------|
|open_tracking |boolean |Enable or disable open tracking | no - defaults to the setting at the transmission level | To override the default for a specific transmission, specify the _options.open_tracking_ field upon creation of the transmission. |
|click_tracking |boolean |Enable or disable click tracking | no - defaults to the setting at the transmission level | To override the default for a specific transmission, specify the _options.click_tracking_ field upon creation of the transmission. |
|transactional |boolean |Distinguish between transactional and non-transactional messages for unsubscribe and suppression purposes | no - defaults to the setting at the transmission level | To override the default for a specific transmission, specify the _options.transactional_ field upon creation of the transmission. |

## Error Attributes

On success, the API returns a "results" JSON object along with HTTP 200.  However, on failure, an "errors" JSON array will be returned along with HTTP 4xx.  Each error is described in a JSON object with the following fields:

| Field         | Type     | Description                           |  Example |
|--------------------|:-:       |---------------------------------------|--------|
|message |string | Explains the class of error  | "substitution language syntax error in template content" |
|code |string| Identifies the class of error| "3000" |
|description|string| Detailed explanation of error| "Error while compiling part text: line 4: syntax error near 'age'" |
|part|string| For substitution errors, identifies the MIME part where the error occurred | "text", "html", "Header:Subject", "text/plain" |
|line|number| For substitution errors, identifies the line number within the MIME part identified by the "part" JSON field | 4 |

## Create and List [/templates]

### Create a Template [POST]

Create a template by providing a **template object** as the POST request body.

At a minimum, the "name" and "content" fields are required, where content must contain the "from", "subject", and at least one of "html" or "text" fields.

By default, when a template is referenced in a transmission, it is the published version of that template.  To submit a transmission that uses a draft template, set the transmission field "use_draft_template" to true.  For additional details, see the Transmissions API documentation for Using a Stored Template.


#### Create Parts

The following are key points about creating parts in your templates, as shown in the example:

* The "id" field may be supplied, and it must be unique.
* By default, templates are created as drafts.  If you would like to directly publish a template upon creation, set the "published" field to true.
* Open and click tracking may be enable/disabled at the template level using the "open_tracking" and
"click_tracking" fields.
* The "from" field may be a JSON object composed of "email" and "name".
* A "Reply-To" header may be specified using the "reply_to" field.
* Both "text" and "html" may be provided.
* Additional headers may be specified in the "headers" JSON dictionary.


#### Create RFC822

Fully formed email_rfc822 content may be provided instead of the "text", "html", "from", and "subject" parts, as shown in the example.



+ Request Create Basic Template (application/json)

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

    + Body

        ```
        {
            "name" : "Summer Sale!",

            "content": {
                "from": "marketing@bounces.company.example",
                "subject": "Summer deals",
                "html": "<b>Check out these deals!</b>"
            }
        }
        ```

+ Response 200 (application/json)

        {
          "results": {
            "id": "11806290401558530"
          }
        }

+ Response 403 (application/json)

        {
          "errors" : [
            {
              "description" : "Unconfigured or unverified sending domain.",
              "code" : "1100",
              "message" : "permission denied"
            }
          ]
        }

+ Response 422 (application/json)

        {
          "errors" : [
            {
              "part" : "text",
              "description" : "Error while compiling part text: line 4: syntax error near 'age'",
              "line" : 4,
              "code" : "3000",
              "message" : "substitution language syntax error in template content"
            }
          ]
        }

+ Request Create Parts (application/json)

  + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

  + Body

        ```js
        {
          "id" : "summer_sale",
          "name" : "Summer Sale!",
          "published" : true,

          "options": {
            "open_tracking" : false,
            "click_tracking" : true
          },

          "content": {
            "from": {
              "email": "marketing@bounces.company.example",
              "name": "Example Company Marketing"
            },

            "subject": "Summer deals for {{name}}",
            "reply_to": "Summer deals <summer_deals@company.example>",

            "text": "Check out these deals {{name}}!",
            "html": "<b>Check out these deals {{name}}!</b>",

            "headers": {
              "X-Customer-Campaign-ID": "Summer2014"
            }
          }
        } 
        ```

+ Response 200 (application/json)

        {
          "results": {
            "id": "summer_sale"
          }
        }


+ Request Create RFC822 (application/json)

  + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

  + Body

        ```js
        {
          "id" : "another_summer_sale",
          "name" : "Summer Sale!",
          "published" : true,

          "options": {
            "open_tracking" : false,
            "click_tracking" : true
          },

          "content": {
            "email_rfc822" : "Content-Type: text/plain\nFrom: Example Company Marketing <marketing@bounces.company.example>\nReply-To:Summer deals <summer_deals@company.example>\nX-Customer-Campaign-ID: Summer2014\nSubject: Summer deals for {{name}}\n\nCheck out these deals {{name}}!"
          }
        }
        ```

+ Response 200 (application/json)

        {
          "results": {
            "id": "another_summer_sale"
          }
        }

### List all Templates [GET]

Lists the most recent version of each template in your account. Each template object in the list will have the following fields:

- id: Unique template ID
- name: Template name
- published: Published state of the template (true = published, false = draft)
- description: Template description

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json)

        {
          "results" : [
            {
              "id" : "summer_sale",
              "name" : "Summer Sale!",
              "published" : true,
              "description" : ""
            },
            {
              "id" : "daily",
              "name" : "daily",
              "published" : false,
              "description" : ""
            }
          ]
        }

## Retrieve [/templates/{id}{?draft}]

### Retrieve a Template [GET]

Retrieve a single template by specifying its ID in the URI path. By default, the most recently
updated version is returned. Use the **draft** query parameter to specify a draft or published
template.


The result will include a "last_update_time" field. The "last_update_time" is the time the template was last updated, for both draft and published versions.

If the template was used for message generation, the result will also include a "last_use" field. The "last_use" time represents the last time any version of this template was used (draft or published).


+ Parameters
    + id (required, string, `11714265276872`) ... ID of the template
    + draft (optional, boolean, `true`) ...If true, returns the most recent draft template.  If false, returns the most recent published template.  If not provided, returns the most recent template version regardless of draft or published.

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json)

        {
          "results" : {
            "id" : "summer_sale",
            "name" : "Summer Sale!",
            "description" : "",
            "published" : true,
            "last_update_time": "2014-05-22T15:12:59+00:00",
            "last_use": "2014-06-02T08:15:30+00:00",

            "options": {
              "open_tracking" : false,
              "click_tracking" : true
            },

            "content": {
              "from": {
                "email": "marketing@bounces.company.example",
                "name": "Example Company Marketing"
              },

              "subject": "Summer deals for {{name}}",
              "reply_to": "Summer deals <summer_deals@company.example>",

              "text": "Check out these deals {{name}}!",
              "html": "<b>Check out these deals {{name}}!</b>",

              "headers": {
                "X-Customer-Campaign-ID": "Summer2014"
              }
            }
          }
        }

## Update [/templates/{id}{?update_published}]

### Update a Template [PUT]

Update an existing template by specifying its ID in the URI path and use a **template object** as the PUT request body.
By default, the update will result in a new draft version, but the published version can be overwritten directly by using the **update_published** query parameter.

The "name" field may be modified, but the "id" field is read only.

If a content object is provided in the update request, it must
contain all relevant content fields whether they are being changed or not.
The new content will completely overwrite the existing content.

The example shows an update that will rename the template, enable open tracking,
and update the content all in one API call. All content fields are included whether they are being
changed or not.

Publishing a template is a specific case of an update.  The body of the PUT
request should contain the `"published": true` field as shown in the example. The 
**update_published** query parameter does not apply.

+ Parameters
    + id (required, string, `11714265276872`) ... ID of the template
    + update_published = `false` (optional, boolean, `true`) ...If true, directly overwrite the existing published template.  If false, create a new draft.

+ Request Update (application/json)

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

    + Body

        ```
        {
          "options" : {
            "open_tracking": true
          },
          "name" : "A new name!",
          "content": {
            "from": {
              "email": "marketing@bounces.company.example",
              "name": "Example Company Marketing"
            },
            "subject": "Updated Summer deals for {{name}}",
            "reply_to": "Summer deals <summer_deals@company.example>",
            "text": "Updated: Check out these deals {{name}}!",
            "html": "<b>Updated: Check out these deals {{name}}!</b>"
          }
        }
        ```

+ Response 200


+ Request Publish (application/json)

  + Headers
      
            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

  + Body

        ```js
        {
          "published": true
        }
        ```

+ Response 200


## Preview [/templates/{id}/preview{?draft}]

### Preview a Template [POST]

Preview the most recent version of an existing template by specifying {id}/preview in the URI path
and providing "substitution_data" as part of the POST request body.
The template's content will be expanded using the substitution data provided and returned
in the response. By default, the most recently updated version is returned.  Use the **draft** query parameter to specify a draft or published
template.

See the Substitutions Reference section for more information.

+ Parameters
    + id (required, string, `11714265276872`) ... ID of the template
    + draft (optional, boolean, `true`) ...If true, previews the most recent draft template.  If false, previews the most recent published template.  If not provided, previews the most recent template version regardless of draft or published.

+ Request (application/json)

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

    + Body

        ```
        {
          "substitution_data" : {
            "name" : "Natalie",
            "age" : 35,
            "member" : true
          }
        }
        ```

+ Response 200 (application/json)

        {
            "results" : {
                "from": {
                    "email": "marketing@bounces.company.example",
                    "name": "Example Company Marketing"
                },
                "subject": "Summer deals for Natalie",
                "reply_to": "Summer deals <summer_deals@company.example>",
                "text": "Check out these deals Natalie!",
                "html": "<b>Check out these deals Natalie!</b>",
                "headers": {
                    "X-Customer-Campaign-ID": "Summer2014"
                }
            }
        }

## Delete [/templates/{id}]

### Delete a Template [DELETE]

Delete a template by specifying its ID in the URI path.
If the template delete API call succeeds, then ALL versions of the template will be deleted from the system (both published AND draft versions).

If a transmission uses a stored template, the template cannot be deleted if the transmission is submitted or generating.

+ Parameters
    + id (required, string, `11714265276872`) ... ID of the template

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

+ Response 200 (application/json)

        {
        }

+ Response 404 (application/json)

    + Body

        ```
        {
        "errors": [
          {
            "message": "resource not found",
            "code": "1600",
            "description": "Template does not exist"
          }
        ]
        }
        ```

+ Response 409 (application/json)

    + Body

        ```
        {
        "errors": [
          {
            "message": "resource conflict",
            "code": "1602",
            "description": "Template is in use by msg generation"
          }
        ]
        }
        ```

# Group Tracking Domains

Tracking domains are used in engagement tracking to report opens and clicks in your messages. When open and click tracking is enabled, you can set up a tracking domain which wraps the tracking pixel and all links in your messages.

For example, in SparkPost.com, the system tracking domain is spgo.io. Your message contains a link to http://www.some-website.com/some-article. That link gets wrapped and the resulting HTML would look something like this:

```html
<a href="https://spgo.io/e/nInKCLCf9wnO2brop7RTsg...">Check out this excellent article</a>
```

With a tracking domain you can replace the domain part of the link. So if your tracking domain was example.domain.com, your HTML would look like this:

```html
<a href="https://example.domain.com/e/nInKCLCf9wnO2brop7RTsg...">Check out this excellent article</a>
```

**Note:** Use of a tracking domain requires modification of your DNS records to include a CNAME record.

## Tracking Domains Attributes

| Field   | Type   | Description | Required | Notes |
|------------|--------|-------------|----------|-------|
| domain | string | Name of the tracking domain | yes | Example: `example.domain.com` |
| port | integer | Determines the port to be used when constructing the tracking URL | no | Example: `8080` |
| secure | boolean | Determines whether the tracking URL should use http or https | no | If true, https will be used. If false, http will be used. |
| default | boolean | Determines whether the tracking domain should be the default used when not explicitly set | no | There can only be one default domain. Defaults to `false`. |
| status | JSON object| JSON object containing status details, including whether this domain's ownership has been verified  | no | Read only. For a full description, see the Status Attributes.|

### Port/Secure Attributes

Upon creation of a tracking domain, the values for port and secure are set according to the following table:

| port (input) | secure (input) | port (value) | secure (value) |
|--------|--------|--------|--------|
| provided value | provided value | provided value | provided value |
| not provided | not provided | 80 | false |
| not provided | false | 80 | false |
| not provided | true | 443 | true |
| 443 | not provided | 443 | true |
| provided value (not 443) | not provided | provided valued | false |

### Status Attributes

Detailed status for this tracking domain is described in a JSON object with the following fields:

| Field         | Type     | Description                           | Default   | Notes   |
|------------------------|:-:       |---------------------------------------|-------------|--------|
| verified | boolean | Whether domain has been verified | false | Read only. This field will return "true" if cname_status is "valid".|
| cname_status | string | Verification status of CNAME configuration | unverified | Read only. Valid values are "unverified", "pending", "invalid" or "valid".|
| compliance_status | string | Compliance status | | Valid values are "pending", "valid", or "blocked".|


## Create and List [/tracking-domains]

### Create a Tracking Domain [POST]

Create a tracking domain. If default is set to true and there is already a default domain, the default is changed.

**NOTE:** For SparkPost, only domain is required in the POST request body. The values for port (80) and secure (false) are not configurable.

+ Request (application/json)

  + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

  + Body

            {
              "domain": "example.domain.com",
              "port": 8080,
              "secure": true,
              "default": true
            }

+ Response 200

  + Body

            {
              "results": {
                "domain": "example.domain.com"
              }
            }

+ Response 400 (application/json)

  + Body

            {
              "errors" : [
                {
                  "code" : "7000",
                  "message" : "restricted domain",
                  "description" : "Please contact us at support@sparkpost.com to get this domain authorized for your account."
                }
              ]
            }

+ Response 409 (application/json)

  + Body

            {
              "errors" : [
                {
                  "code" : "1602",
                  "message" : "resource conflict",
                  "description" : "The tracking domain already exists."
                }
              ]
            }

+ Response 422 (application/json)

  + Body

            {
              "errors": [
                {
                  "code": "1300",
                  "message": "invalid data format/type",
                  "description": "Error validating domain name syntax for domain: 'example..domain.com'"
                }
              ]
            }

+ Response 422 (application/json)

  + Body

            {
              "errors": [
                {
                  "code": "1300",
                  "message": "invalid data format/type",
                  "description": "Error domain name length too short for domain: 'ex'"
                }
              ]
            }

+ Response 422 (application/json)

  + Body

            {
              "errors": [
                {
                  "code": "1300",
                  "message": "invalid data format/type",
                  "description": "Error domain name contains no '.'(s) for domain: 'exampledomaincom'"
                }
              ]
            }

+ Response 422 (application/json)

  + Body

            {
              "errors": [
                {
                  "code": "1300",
                  "message": "invalid data format/type",
                  "description": "Error domain name contains invalid characters or spaces for domain: 'example*&#.domain.com'"
                }
              ]
            }

+ Response 422 (application/json)

  + Body

            {
              "errors": [
                {
                  "code": "1400",
                  "message": "required field is missing",
                  "description": "field 'domain' is required"
                }
              ]
            }


### List all Tracking Domains [GET]

Retrieve a list of all tracking domains.

**NOTE:** For SparkPost, port and secure are not returned since they are hard coded values.

+ Request

  + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json)

  + Body

            {
              "results": [
                {
                  "port": 8080,
                  "domain": "example.domain.com",
                  "secure": true,
                  "default": true,
                  "status": {
                    "verified": false,
                    "cname_status": "pending",
                    "compliance_status": "pending"
                  }
                },
                {
                  "port": 80,
                  "domain": "example2.domain.com",
                  "secure": false,
                  "default": false,
                  "status": {
                    "verified": true,
                    "cname_status": "valid",
                    "compliance_status": "valid"
                  }
                }
              ]
            }


## Retrieve, Update, and Delete [/tracking-domains/{domain}]

### Retrieve a Tracking Domain [GET]

Retrieve an existing tracking domain.

**NOTE:** For SparkPost, port and secure are not returned since they are hard coded values.

+ Parameters
  + domain (required, string, `example.domain.com`) ... domain name


+ Request

  + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json)

  + Body

            {
              "results": {
                "port": 8080,
                "domain": "example.domain.com",
                "secure": true,
                "default": true,
                "status": {
                  "verified": false,
                  "cname_status": "pending",
                  "compliance_status": "pending"
                }
              }
            }

+ Response 404 (application/json)

  + Body

            {
              "errors": [
                {
                  "code": "1600",
                  "message": "resource not found",
                  "description": "Resource not found: example.domain.com"
                }
              ]
            }


### Update a Tracking Domain [PUT]

Update the attributes of an existing tracking domain.

**NOTE:** For SparkPost, port and secure cannot be updated.

+ Parameters
  + domain (required, string, `example.domain.com`) ... domain name

+ Request

  + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

  + Body

        ```
        {
            "port"    : 80,
            "secure"  : true,
            "default" : true
        }
        ```

+ Response 200

  + Body

        ```
        {
            "results": {
              "domain": "example.domain.com"
            }
        }
        ```

+ Response 404 (application/json)

  + Body

            {
              "errors": [
                {
                  "code": "1600",
                  "message": "resource not found",
                  "description": "Resource not found: example.domain.com"
                }
              ]
            }


### Delete a Tracking Domain [DELETE]

Delete an existing tracking domain.

+ Parameters
  + domain (required, string, `example.domain.com`) ... domain name

+ Request

  + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

+ Response 204

+ Response 404 (application/json)

  + Body

            {
              "errors": [
                {
                  "code": "1600",
                  "message": "resource not found",
                  "description": "Resource not found: example.domain.com"
                }
              ]
            }


## Verify [/tracking-domains/{domain}/verify]

### Verify a Tracking Domain [POST]
Initiate a check against the CNAME DNS record for the specified tracking domain. The domain's `status` object is returned on success.

+ Parameters
  + domain (required, string, `example.domain.com`) ... domain name


+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf


+ Response 200 (application/json; charset=utf-8)

        {
            "results": {
              "verified": true,
              "cname_status": "valid",
              "compliance_status": "valid"
            }
        }

+ Response 404 (application/json)

  + Body

            {
              "errors": [
                {
                  "code": "1600",
                  "message": "resource not found",
                  "description": "Resource not found: example.domain.com"
                }
              ]
            }

# Group Transmissions

A transmission is a collection of messages belonging to the same campaign.  It is also known as a mailing.  The Transmissions API provides the means to manage transmissions.  Messages in the transmissions are generated and sent to a specified list of recipients using a specified message template. The recipient list can be a stored list created using the Recipient Lists API, or it can be created "inline" as part of a transmission.  Similarly, the message template can be a stored template created using the Templates API, or it can be created "inline" as part of a transmission.  Messages are generated for the transmission for all specified recipients using the message template and performing substitution of data as necessary.

In addition, engagement tracking options can be set in the transmission to track message opens and clicks.

## Transmission Attributes 

| Field         | Type     | Description                           | Required         | Notes   |
|--------------------|----------------      |---------------------------------------|--------------------------|--------|
|id |string |ID of the transmission |no |Read only.  A unique ID is generated for each transmission on submission. |
|state |string  |State of the transmission  | no | Read only.  Valid responses are "submitted", "Generating", "Success", or "Canceled". |
|options | JSON object | JSON object in which transmission options are defined | no | For a full description, see the Options Attributes.
|recipients | JSON array or JSON object | Inline recipient objects or object containing stored recipient list ID |yes | Specify a stored recipient list or specify recipients inline.  When using a stored recipient list, specify the "list_id" as described in Using a Stored Recipient List.  Otherwise, provide the recipients inline using the fields described in the Recipient List API documentation for Recipient Attributes. |
|campaign_id | string |Name of the campaign|no|Maximum length - 64 bytes| 
|description | string |Description of the transmission|no | Maximum length - 1024 bytes| 
|metadata|JSON object|Transmission level metadata containing key/value pairs |no| Metadata is available during events through the Webhooks and is provided to the substitution engine.  A maximum of 1000 bytes of merged metadata (transmission level + recipient level) is available with recipient metadata taking precedence over transmission metadata when there are conflicts.  |
|substitution_data|JSON object|Key/value pairs that are provided to the substitution engine| no | Recipient substitution data takes precedence over transmission substitution data. Unlike metadata, substitution data is not included in Webhook events. |
|return_path | string |Email to use for envelope FROM ( **Note:** SparkPost Elite only )| yes | To support Variable Envelope Return Path (VERP), this field can also optionally be specified inside of the address object of a specific recipient in order to give the recipient a unique envelope MAIL FROM. |
|content| JSON object | Content that will be used to construct a message | yes | Specify a stored template or specify inline template content. When using a stored template, specify the "template_id" as described in Using a Stored Template.  Otherwise, provide the inline content using the fields described in Inline Content Attributes.  Maximum size - 20MBs|
|total_recipients | number | Computed total recipients | no | Read only|
|num_generated | number | Computed total number of messages generated | no |Read only|
|num_failed_generation| number| Computed total number of failed messages | no | Read only|
|num_invalid_recipients | number | Number of recipients that failed input validation |no |Read only|


### Options Attributes
| Field         | Type     | Description                           | Required   | Notes   |
|------------------------|:-:       |---------------------------------------|-------------|--------|
|start_time | string | Delay generation of messages until this datetime.  For additional information, see Scheduled Transmissions. |no - defaults to immediate generation | Format YYYY-MM-DDTHH:MM:SS+-HH:MM or "now". Example: '2015-02-11T08:00:00-04:00'.|
|open_tracking|boolean| Whether open tracking is enabled for this transmission| no |If not specified, the setting at template level is used, or defaults to true. | 
|click_tracking|boolean| Whether click tracking is enabled for this transmission| no |If not specified, the setting at template level is used, or defaults to true. | 
|transactional|boolean|Whether message is transactional or non-transactional for unsubscribe and suppression purposes | no |If not specified, the setting at template level is used, or defaults to false. |
|sandbox|boolean|Whether or not to use the sandbox sending domain ( **Note:** SparkPost only )| no |Defaults to false. |
|skip_suppression|boolean|Whether or not to ignore customer suppression rules, for this transmission only.  Only applicable if your configuration supports this parameter. ( **Note:** SparkPost Elite only )| no - Defaults to false |  Unlike most other options, this flag is omitted on a GET transmission response unless the flag's value is true. |

### Inline Content Attributes

The following attributes are used when specifying inline content in the transmission's "content" JSON object. Note that these attributes should not be present if using a stored template.

| Field         | Type     | Description                           | Required   | Notes   |
|------------------------|:-:       |---------------------------------------|-------------|--------|
|html    |string  |HTML content for the email's text/html MIME part|At a minimum, html or text is required.  |Expected in the UTF-8 charset with no Content-Transfer-Encoding applied.  Substitution syntax is supported. |
|text    |string  |Text content for the email's text/plain MIME part|At a minimum, html or text is required. |Expected in the UTF-8 charset with no Content-Transfer-Encoding applied.  Substitution syntax is supported.|
|subject |string  |Email subject line   | yes |Expected in the UTF-8 charset without RFC2047 encoding.  Substitution syntax is supported. |
|from |string or JSON  | Address _"from" : "deals@company.com"_ or JSON object composed of the "name" and "email" fields _"from" : { "name" : "My Company", "email" : "deals@company.com" }_ used to compose the email's "From" header| yes | Substitution syntax is supported. |
|reply_to |string  |Email address used to compose the email's "Reply-To" header | no | Substitution syntax is supported. |
|headers| JSON | JSON dictionary containing headers other than "Subject", "From", "To", and "Reply-To"  | no |See the Header Notes. |
|attachments| JSON | JSON array of attachments.  **Note:** Please contact support@sparkpost.com to request enablement of attachments and inline images on your account (enabled by default on SparkPost Elite accounts) | no | For a full description, see Attachment Attributes. |
|inline_images| JSON | JSON array of inline images.  **Note:** Please contact support@sparkpost.com to request enablement of attachments and inline images on your account (enabled by default on SparkPost Elite accounts) | no | For a full description, see Inline Image Attributes. |

#### Header Notes

* Headers such as "Content-Type" and "Content-Transfer-Encoding" are not allowed here as they are auto generated upon construction of the email.
* The "To" header should not be specified here, since it is generated from each recipient's _address.name_ and _address.email_.
* Each header value is expected in the UTF-8 charset without RFC2047 encoding.
* Substitution syntax is supported.

#### email_rfc822 Notes

Alternately, the content JSON object may contain a single "email_rfc822" field.  email_rfc822 is mutually exclusive with all of the above fields.

| Field         | Type     | Description                           | Required   | Notes   |
|--------------------|:-:       |---------------------------------------|-----------------------|--------|
|email_rfc822    |string  |Pre-built message with the format as described by the [message/rfc822 Content-Type](http://tools.ietf.org/html/rfc2046#section-5.2.1) |no   |  See the email_rfc822 Notes. |

* Substitutions will be applied in the top-level headers and the first non-attachment text/plain and
first non-attachment text/html MIME parts only.
* Lone `LF`s and lone `CR`s are allowed. The system will convert line endings to `CRLF` where
necessary.
* The provided email_rfc822 should NOT be dot stuffed.  The system dot stuffs before sending the outgoing message.
* The provided email_rfc822 should NOT contain the SMTP terminator `\r\n.\r\n`.  The system always adds this terminator.
* The provided email_rfc822 in MIME format will be rejected if SparkPost and SparkPost Elite cannot parse the contents into a MIME tree.

### Attachment Attributes

**Note:** Please contact support@sparkpost.com to request enablement of attachments and inline images on your account (enabled by default on SparkPost Elite accounts)

Attachments for a transmission are specified in the content.attachments JSON array where each JSON object in the array is described by the following fields:

| Field         | Type     | Description                           | Required   | Notes   |
|--------------------|:-:       |---------------------------------------|-------------|------------------|
|type |string |The MIME type of the attachment; e.g., "text/plain", "image/jpeg", "audio/mp3", "video/mp4", "application/msword", "application/pdf", etc., including the "charset" parameter (text/html; charset="UTF-8") if needed. The value will apply "as-is" to the "Content-Type" header of the generated MIME part for the attachment. | yes |  |
|name |string |The filename of the attachment (for example, "document.pdf"). This is inserted into the filename parameter of the Content-Disposition header. | yes | Maximum length - 255 bytes |
|data |string |The content of the attachment as a Base64 encoded string.  The string should not contain \r\n line breaks.  The SparkPost systems will add line breaks as necessary to ensure the Base64 encoded lines contain no more than 76 characters each. | yes | The entirety of transmission content (text + html + attachments + inline images) is limited to 20 MBs |

### Inline Image Attributes

**Note:** Please contact support@sparkpost.com to request enablement of attachments and inline images on your account (enabled by default on SparkPost Elite accounts)

Inline images for a transmission are specified in the content.inline_images JSON array where each JSON object in the array is described by the following fields:

| Field         | Type     | Description                           | Required   | Notes   |
|--------------------|:-:       |---------------------------------------|-------------|------------------|
|type |string |The MIME type of the image; e.g., "image/jpeg".  The value will apply "as-is" to the "Content-Type" header of the generated MIME part for the image. | yes |  |
|name |string |The name of the inline image, which will be inserted into the Content-ID header. The image should be referenced in your HTML content using \<img src="cid:THIS_NAME"\>. The name must be unique within the content.inline_images array. | yes | Maximum length - 255 bytes |
|data |string | The content of the image as a Base64 encoded string.  The string should not contain \r\n line breaks.  The SparkPost systems will add line breaks as necessary to ensure the Base64 encoded lines contain no more than 76 characters each. | yes | The entirety of transmission content (text + html + attachments + inline images) is limited to 20 MBs |

### Using a Stored Template

The following attributes are used when specifying a stored template in the transmission's "content" JSON object. Note that these attributes should not be present when using inline content.

| Field         | Type     | Description                           | Required   | Notes   |
|------------------------|:-:       |---------------------------------------|-------------|--------|
|template_id|string| ID of the stored template to use | yes |Specify this field when using a stored template.  Maximum length -- 64 bytes|
|use_draft_template|boolean |Whether or not to use a draft template|no - defaults to false| If this field is set to true and no draft template exists, the transmission will fail.|

### Using a Stored Recipient List

The following recipients attribute is used when specifying a stored recipient list in the transmission. Note that this attribute should not be present when specifying recipients inline.

| Field         | Type     | Description                           | Required   | Notes   |
|------------------------|:-:       |---------------------------------------|-------------|--------|
|list_id | string  | Identifier of the stored recipient list to use | yes | Specify this field when using a stored recipient list. |

### Scheduled Transmissions
Use the _options.start_time_ attribute to delay generation of messages.  The scheduled time must be in the future and cannot be greater than 1 year from the time of submission.  If the scheduled time does not fall in that range, the transmission is not accepted.


## Create [/transmissions{?num_rcpt_errors}]
 
### Create a Transmission [POST]

You can create a transmission in a number of ways. In all cases, you can use the **num_rcpt_errors** parameter to limit the number of recipient errors returned.

**Note:** The "return_path" in the POST request body applies to SparkPost Elite only.

**Note:** Sending limits apply to SparkPost only. When a transmission is created in SparkPost, the number of messages in the transmission is compared to the sending limit of your account. If the transmission will cause you to exceed your sending limit, the entire transmission results in an error and no messages are sent.  Note that no messages will be sent for the given transmission, regardless of the number of messages that caused you to exceed your sending limit. In this case, the Transmission API will return an HTTP 420 error code with an error detailing whether you would exceed your hourly, daily, or sandbox sending limit. 

#### Using Inline Email Part Content

Create a transmission using inline email part content.

#### Using Inline RFC822 Content

Create a transmission using inline RFC822 content. Content headers are not generated for transmissions providing RFC822 content. They are expected to be provided as headers contained in the RFC822 content.

#### Using a Stored Recipients List

Create a transmission using a stored recipients list by specifying the "list_id" in the "recipients" attribute.

#### Using a Stored Template

Create a transmission using a stored template by specifying the "template_id" in the "content" attribute.  The "use_draft_template" field is optional and indicates whether to use a draft version or the published version of the template when generating messages.

#### Scheduling Transmissions

Create a scheduled transmission to be generated and sent at a future time by specifying "start_time" in the "options" attribute.

Scheduling a transmission that specifies a stored template will use the LATEST version of the template available at the time of scheduled generation.  The use of published versus draft versions follows the same logic in all transmission requests, whether scheduled or immediate generation. When "use_draft_template" is not specified (or set to false), the latest published version of the specified stored template is used. If "use_draft_template" is set to true, the latest draft version is used in the transmission instead.

Once message generation has been initiated, all messages in the transmission will use the template selected at the start of the generation. If a template update is made during the generation of a transmission that uses that template, the template update will succeed but the transmission will continue to use the version that was selected at the start of the generation.


+ Parameters
  + num_rcpt_errors (optional, number, `3`) ... Maximum number of recipient errors that this call can return, otherwise all validation errors are returned.


+ Request Create Transmission Using Inline Email Part Content (application/json)

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

    + Body

        ```
        {
          "options": {
            "open_tracking": true,
            "click_tracking": true
          },

          "campaign_id": "christmas_campaign",
          "return_path": "bounces-christmas-campaign@flintstone.com",

          "metadata": {
            "user_type": "students"
          },

          "substitution_data": {
            "sender": "Big Store Team"
          },

          "recipients": [
            {
              "return_path": "123@bounces.flintstone.com",
              "address": {
                "email": "wilma@flintstone.com",
                "name": "Wilma Flintstone"
              },
              "tags": [
                "greeting",
                "prehistoric",
                "fred",
                "flintstone"
              ],
              "metadata": {
                "place": "Bedrock"
              },
              "substitution_data": {
                "customer_type": "Platinum"
              }
            }
          ],
          "content": {
            "from": {
              "name": "Fred Flintstone",
              "email": "fred@flintstone.com"
            },
            "subject": "Big Christmas savings!",
            "reply_to": "Christmas Sales <sales@flintstone.com>",
            "headers": {
              "X-Customer-Campaign-ID": "christmas_campaign"
            },
            "text": "Hi {{address.name}} \nSave big this Christmas in your area {{place}}! \nClick http://www.mysite.com and get huge discount\n Hurry, this offer is only to {{user_type}}\n {{sender}}",
            "html": "<p>Hi {{address.name}} \nSave big this Christmas in your area {{place}}! \nClick http://www.mysite.com and get huge discount\n</p><p>Hurry, this offer is only to {{user_type}}\n</p><p>{{sender}}</p>"
          }
        }
        ```

+ Response 200 (application/json)

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

    + Body

        ```
        {
          "results": {
            "total_rejected_recipients": 0,
            "total_accepted_recipients": 1,
            "id": "11668787484950529"
          }
        }
        ```

+ Response 403 (application/json)

    + Body

        ```
        {
          "errors" : [
            {
              "description" : "Unconfigured or unverified sending domain.",
              "code" : "1100",
              "message" : "permission denied"
            }
          ]
        }
        ```

+ Request Create Transmission with Inline RFC822 Content (application/json)

  + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

  + Body
  
            {
              "options": {
                "open_tracking": true,
                "click_tracking": true
              },
              "campaign_id": "christmas_campaign",
              "return_path": "bounces-christmas-campaign@flintstone.com",
              "metadata": {
                "user_type": "students"
              },
              "substitution_data": {
                "sender": "Big Store Team"
              },
              "recipients": [
                {
                  "return_path": "123@bounces.flintstone.com",
                  "address": {
                    "email": "wilma@flintstone.com",
                    "name": "Wilma Flintstone"
                  },
                  "tags": [
                    "greeting",
                    "prehistoric",
                    "fred",
                    "flintstone"
                  ],
                  "metadata": {
                    "place": "Bedrock"
                  },
                  "substitution_data": {
                    "name": "Will Smith"
                  }
                },
                {
                  "address": {
                    "email": "abc@flintstone.com",
                    "name": "Fred Fintstone"
                  },
                  "tags": [
                    "greeting",
                    "prehistoric",
                    "fred",
                    "flintstone"
                  ],
                  "metadata": {
                    "place": "MD"
                  },
                  "substitution_data": {
                    "name": "Fred"
                  }
                }
              ],
              "content": {
                "email_rfc822": "Content-Type: text\/plain\r\nTo: \"{{address.name}}\" <{{address.email}}>\r\n\r\n Hi {{name}} \nSave big this Christmas in your area {{place}}! \nClick http://www.mysite.com and get huge discount\n Hurry, this offer is only to {{user_type}}\n {{sender}}\r\n"
              }
            }

+ Response 200 (application/json)

  + Body
  
            {
              "results": {
                "total_rejected_recipients": 0,
                "total_accepted_recipients": 2,
                "id": "11668787484950529"
              }
            }

+ Response 403 (application/json)

  + Body

            {
              "errors" : [
                {
                  "description" : "Unconfigured or unverified sending domain.",
                  "code" : "1100",
                  "message" : "permission denied"
                }
              ]
            }


+ Request Create Transmission with Stored Recipient List (application/json)

  + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

  + Body
  
            {
                "campaign_id": "christmas_campaign",
                "return_path": "bounces-christmas-campaign@flintstone.com",

                "recipients": {
                  "list_id": "christmas_sales_2013"
                },

                "content": {
                  "from": {
                    "name": "Fred Flintstone",
                    "email": "fred@flintstone.com"
                  },

                  "subject": "Big Christmas savings!",

                  "text": "Hi {{name}} \nSave big this Christmas in your area {{place}}! \nClick http://www.mysite.com and get huge discount\n Hurry, this offer is only to {{user_type}}\n {{sender}}",
                  "html": "<p>Hi {{name}} \nSave big this Christmas in your area {{place}}! \nClick http://www.mysite.com and get huge discount\n</p><p>Hurry, this offer is only to {{user_type}}\n</p><p>{{sender}}</p>"
                }
            }

+ Response 200 (application/json)

  + Body

            {
              "results": {
                "total_rejected_recipients": 0,
                "total_accepted_recipients": 10,
                "id": "11668787484950529"
              }
            }

+ Response 404 (application/json)

  + Body
  
            {
              "errors": [
                {
                  "message": "resource not found",
                  "description": "List 'christmas_sales_2013' does not exist",
                  "code": "1600"
                }
              ]
            }

+ Request Create Transmission with Stored Template (application/json)

  + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

  + Body
  
            {
              "options": {
                "open_tracking": true,
                "click_tracking": true
              },

              "campaign_id": "thanksgiving_campaign",

              "content": {
                "template_id": "christmas_offer",
                "use_draft_template": false
              },

              "return_path": "bounces-christmas-campaign@flintstone.com",

              "metadata": {
                "user_type": "students"
              },
              "substitution_data": {
                "subkey": "subvalue"
              },

              "recipients": [
                {
                  "return_path": "123@bounces.flintstone.com",
                  "address": {
                    "email": "wilma@flintstone.com",
                    "name": "Wilma Flintstone"
                  },
                  "tags": [
                    "greeting",
                    "prehistoric",
                    "fred",
                    "flintstone"
                  ],
                  "metadata": {
                    "place": "Bedrock"
                  },
                  "substitution_data": {
                    "subrcptkey": "subrcptvalue"
                  }
                },
                {
                  "return_path": "456@bounces.flintstone.com",
                  "address": {
                    "email": "abc@flintstone.com"
                  },
                  "tags": [
                    "greeting",
                    "prehistoric",
                    "fred",
                    "flintstone"
                  ],
                  "metadata": {
                    "place": "MD"
                  }
                }
              ]
            }

+ Response 200 (application/json)

  + Body
  
            {
              "errors": [
                {
                  "message": "transmission created, but with validation errors",
                  "code": "2000"
                }
              ],
              "results": {
                "rcpt_to_errors": [
                  {
                    "message": "required field is missing",
                    "description": "address.email is required for each recipient",
                    "code": "1400"
                  }
                ],
                "total_rejected_recipients": 1,
                "total_accepted_recipients": 1,
                "id": "11668787484950530"
              }
            }

+ Response 404 (application/json)

  + Body
  
            {
              "errors": [
                {
                  "message": "resource not found",
                  "description": "template 'christmas_offer' does not exist",
                  "code": "1600"
                }
              ]
            }

+ Request Number of Messages Exceeds Sending Limit (application/json)

  + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

  + Body
  
            {
                "campaign_id": "christmas_campaign",

                "recipients": {
                  "list_id": "list_exceeds_sending_limit"
                },

                "content": {
                  "from": {
                    "name": "Fred Flintstone",
                    "email": "fred@flintstone.com"
                  },

                  "subject": "Big Christmas savings!",

                  "text": "Hi {{name}} \nSave big this Christmas in your area {{place}}! \nClick http://www.mysite.com and get huge discount\n Hurry, this offer is only to {{user_type}}\n {{sender}}",
                  "html": "<p>Hi {{name}} \nSave big this Christmas in your area {{place}}! \nClick http://www.mysite.com and get huge discount\n</p><p>Hurry, this offer is only to {{user_type}}\n</p><p>{{sender}}</p>"
                }
            }

+ Response 420 (application/json)

  + Body
  
            {
              "errors": [
                {
                  "message": "Exceed Sending Limit (hourly)",
                  "code": "2101"
                }
              ]
            }

+ Response 420 (application/json)

  + Body
  
            {
              "errors": [
                {
                  "message": "Exceed Sending Limit (daily)",
                  "code": "2102"
                }
              ]
            }

+ Response 420 (application/json)

  + Body
  
            {
              "errors": [
                {
                  "message": "Exceed Sending Limit (sandbox)",
                  "code": "2103"
                }
              ]
            }

+ Request Create Scheduled Transmission (application/json)

  + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

  + Body
  
            {
                "name" : "Fall Sale",
                "campaign_id": "fall",
                "return_path": "deals@company.com",

                "options": {
                  "start_time" : "2015-10-11T08:00:00-04:00",
                  "open_tracking": true,
                  "click_tracking": true
                },

                "recipients": {
                  "list_id": "all_subscribers"
                },

                "content": {
                  "template_id" : "fall_deals"
                }
            }

+ Response 200 (application/json)

  + Body

            {
              "results": {
                "total_rejected_recipients": 1000,
                "total_accepted_recipients": 0,
                "id": "11668787484950529"
              }
            }

+ Request Create Transmission with attachments (application/json)

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

    + Body

        ```
        {
          "campaign_id" : "attachment_example",
          "recipients": [
            {
              "address": "wilma@flintstone.com"
            }
          ],
          "content": {
            "from": {
              "email": "billing@company.example",
              "name": "Example Company"
            },

            "subject": "Billing statement",
            "html": "<b>Please see your attached billing statement</b>",
            "attachments" : [
              {
                "type" : "application/pdf",
                "name" : "billing.pdf",
                "data" : "Q29uZ3JhdHVsYXRpb25zLCB5b3UgY2FuIGJhc2U2NCBkZWNvZGUh"
              },
              {
                "type" : "text/plain; charset=UTF-8",
                "name" : "explanation.txt",
                "data" : "TW92ZSBhbG9uZy4gIE5vdGhpbmcgdG8gc2VlIGhlcmUu"
              }
            ]
          }
        }
        ```

+ Response 200 (application/json)

    + Body

        ```
        {
          "results": {
            "total_rejected_recipients": 0,
            "total_accepted_recipients": 1,
            "id": "11668787484950529"
          }
        }

+ Request Create Transmission with inline images (application/json)

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

    + Body

        ```
        {
          "campaign_id" : "inline_image_example",
          "recipients": [
            {
              "address": "wilma@flintstone.com"
            }
          ],
          "content": {
            "from": {
              "email": "marketing@company.example",
              "name": "Example Company"
            },

            "subject": "Inline image example",
            "html": "<html><body>Here is your inline image!<br> <img src=\"cid:my_image.jpeg\"></body></html>",
            "inline_images" : [
              {
                "type" : "image/jpeg",
                "name" : "my_image.jpeg",
                "data" : "VGhpcyBkb2Vzbid0IGxvb2sgbGlrZSBhIGpwZWcgdG8gbWUh"
              }
            ]
          }
        }
        ```

+ Response 200 (application/json)

    + Body

        ```
        {
          "results": {
            "total_rejected_recipients": 0,
            "total_accepted_recipients": 1,
            "id": "11668787484950529"
          }
        }



## Retrieve [/transmissions/{id}]

### Retrieve a Transmission [GET]

Retrieve the details about a transmission by specifying its ID in the URI path.

The response for a transmission using an inline template will include "template_id":"inline".  Inline templates cannot be specifically queried.

**Note:** The "return_path" is returned in the response for SparkPost Elite only.

+ Parameters
    + id (required, number, `11714265276872`) ... ID of the transmission

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json)

    + Body

        ```
        {
          "results": {
            "transmission": {
              "id": "11750520427380741",
              "description": "",
              "state": "Success",
              "campaign_id": "white_christmas",
              "content": {
                "template_id": "Bob's template",
                "use_draft_template": false
              },
              "return_path": "fred@flintstone.com",
              "rcpt_list_chunk_size": 100,
              "rcpt_list_total_chunks": 1,
              "num_rcpts": 10,
              "num_generated": 10,
              "num_failed_gen": 0,
              "generation_start_time": "2014-05-22T15:12:59+00:00",
              "generation_end_time": "2014-05-22T15:13:00+00:00",
              "substitution_data": "",
              "metadata": {
                "key1": "value1"
              },
              "options": {
                "open_tracking": "",
                "click_tracking": ""
              }
            }
          }
        }
        ```

+ Response 404 (application/json)

    + Body

            {
              "errors": [
                {
                  "message": "resource not found",
                  "description": "Resource not found:transmission id 123",
                  "code": "1600"
                }
              ]
            }


## List [/transmissions{?campaign_id,template_id}]

### List all Transmissions [GET]
List an array of transmission summary objects.  A transmission summary object contains the "template_id", "id", "campaign_id", "description", and "state".  The following lists are supported:

* All multi-recipient transmissions
* Multi-recipient transmissions using a specific template
* Multi-recipient transmissions for a campaign
* Multi-recipient transmissions for a campaign that use a specific template

Note that single recipient transmissions are not returned.

By default, the list includes all transmissions for all campaigns.  Use the **template_id** parameter to specify a template and the **campaign_id** parameter to specify a campaign.

The response for transmissions using an inline template will include "template_id":"inline".  Inline templates cannot be specifically queried.

The example response shows a query on _campaign_id=thanksgiving_, with **template_id** not specified as part of the query.

+ Parameters
  + campaign_id (optional, string,`thanksgiving`) ... ID of the campaign used by the transmissions
  + template_id (optional, string,`thanksgiving_template`) ... ID of the template used by the transmissions

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json)

    + Body

        ```
        {
          "results": [
            {
              "content" : {
                "template_id": "winter_sale"
              },
              "id": "11713562166689858",
              "campaign_id": "thanksgiving",
              "description": "",
              "state": "submitted"
            },
            {
              "content" : {
                "template_id": "inline"
              },
              "id": "11713562166689979",
              "campaign_id": "thanksgiving",
              "description": "",
              "state": "submitted"
            },
            {
              "content" : {
                "template_id": "thanksgiving_template"
              },
              "id": "11713048079237202",
              "campaign_id": "thanksgiving",
              "description": "",
              "state": "submitted"
            }
          ]
        }
        ```

## Delete [/transmissions/{id}]

### Delete a Transmission [DELETE]

Delete a transmission by specifying its ID in the URI path.

Only transmissions which are scheduled for future generation may be deleted.

Scheduled transmissions cannot be deleted if the transmission is within 10 minutes of the scheduled generation time.


+ Parameters
    + id (required, string, `11714265276872`) ... ID of the transmission 

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json)

    +  Body

        {
        }

+ Response 404 (application/json)

  + Body
          {
            "errors": [
              {
                "message": "resource not found",
                "code": "1600",
                "description": "Resource not found:transmission id 999999999"
              }
            ]
          }

+ Response 409 (application/json)

  + Body
          {
            "errors": [
              {
                "message": "too close to generation time to delete transmission",
                "code": "2003",
                "description": "Deletion time window (660 seconds) doesn't permit transmission deletion"
              }
            ]
          }

+ Response 409 (application/json)

  + Body
          {
            "errors": [
              {
                "message": "transmission database record is in an invalid state for deletion",
                "code": "2006",
                "description": "Unable to delete a transmission that is in progress (state=Generating)"
              }
            ]
          }

+ Response 409 (application/json)

  + Body
          {
            "errors": [
              {
                "message": "transmission database record is in an invalid state for deletion",
                "code": "2006",
                "description": "Unable to delete a transmission that has completed (state=Success)"
              }
            ]
          }

# Group Webhooks

The Webhooks API provides the means to create, review, update, and delete webhooks, which enables you to
receive push updates of the raw events generated by SparkPost and SparkPost Elite.

The following are key operational details:
* Any webhook batch that does not receive an HTTP 200 response will be retried for a total of 4 hours before the data is discarded.
* Each webhook batch contains the header X-MessageSystems-Batch-ID, which is useful for auditing and prevention of processing duplicate batches.
* Webhooks posting to your endpoint will timeout after 10 seconds. For best results, write webhook batches to disk and then process asynchronously to minimize data loss if you have a problem with your database.

## Webhooks Object Properties

| Property          | Type   | Description | Required | Notes |
|-------------------|--------|-------------|----------|-------|
| name              | string | User-friendly name for webhook | yes | example: `Example webhook` |
| target            | string | URL of the target to which to POST event batches | yes |  When a webhook is created or updated with a change to this property, a test POST request is sent to the given URL. The target URL must accept the connection and respond with HTTP 200; otherwise, your request to the Webhook API will fail with HTTP 400, and the requested change will not be applied.<br />example: `http://client.example.com/example-webhook` |
| events            | array  | Array of event types this webhook will receive | yes | Use the Webhooks Events endpoint to list the available event types.<br />example: `["delivery", "injection", "open", "click"]`|
| auth_type         | string | Type of authentication to be used during POST requests to target | no | examples: `oauth2`, `none` |
| auth_request_details | JSON | Object containing details needed to request authorization credentials, as necessary | no | example: `{ "url": "https://oauth.myurl.com/tokens", "body": { "client_id": "<oauth client id>", "client_secret": "<oauth client secret>" }}`|
| auth_credentials         | JSON | Object containing credentials needed to make authorized POST requests to target | no | example: `{ access_token: "<oauth token>", expires_in: 3600 }` |
| auth_token        | string | Authentication token to present in the X-MessageSystems-Webhook-Token header of POST requests to target | no | Use this token in your target application to confirm that data is coming from the Webhooks API. <br />example: `5ebe2294ecd0e0f08eab7690d2a6ee69`<br /><br />_Note: This field is deprecated, you should use the auth_type field instead._ |

__**The SparkPost webhooks API uses MaxMind software [MaxMind License](/docs/3RD_PARTY_LICENSES.md)**__
 
## Events Documentation [/webhooks/events/documentation]

### Documentation [GET]

List descriptions of the events, event types, and event fields that could be included in a Webhooks post to your target URL.

+ Request

  + Headers
      Accept: application/json

+ Response 200 (application/json)
  ```js
  {
    "results": {
      "message_event": {
        "description": "Message events describe the life cycle of a message including injection, delivery, and disposition.",
        "display_name": "Message Events",
        "events": {
          "bounce": {
            "description": "Remote MTA has permanently rejected a message.",
            "display_name": "Bounce",
            "event": {
              "campaign_id": {
                "description": "Campaign of which this message was a part",
                "sampleValue": "Example Campaign Name"
              },
              "timestamp": {
                "description": "Event date and time, in Unix timestamp format (integer seconds since 00:00:00 GMT 1970-01-01)",
                "sampleValue": 1427736822
              }
            }
          }
        }
      }
    }
  }
  ```

## Events Samples [/webhooks/events/samples{?events}]

### Samples [GET]

List an example of the event data that will be posted by a Webhook for the specified events.

**Note:** the data that will arrive at your target URL will **not** contain the top level ``results`` key shown in the example response.

+ Parameters
  + events (optional, string, `bounce`) ... Event types for which to get a sample payload, use the Webhooks Events endpoint to list the available event types, defaults to all event types.

+ Request

  + Headers
      Accept: application/json

+ Response 200 (application/json)
  ```js
  {
    "results": [
      {
        "msys": {
          "message_event": {
            "type": "bounce",
            "bounce_class": "1",
            "campaign_id": "Example Campaign Name",
            "customer_id": "1",
            "error_code": "554",
            "ip_address": "127.0.0.1",
            "message_id": "0e0d94b7-9085-4e3c-ab30-e3f2cd9c273e",
            "msg_from": "sender@example.com",
            "msg_size": "1337",
            "num_retries": "2",
            "rcpt_meta": {},
            "rcpt_tags": [
              "male",
              "US"
            ],
            "rcpt_to": "recipient@example.com",
            "reason": "000 Example Remote MTA Bounce Message",
            "routing_domain": "example.com",
            "template_id": "templ-1234",
            "template_version": "1",
            "timestamp": 1427736822,
            "transmission_id": "65832150921904138"
          }
        }
      }
    ]
  }
  ```

## Create [/webhooks]

### Create a Webhook [POST]

Create a webhook by providing a **webhooks object** as the POST request body.  On creation, events will
begin to be pushed to the target URL specified in the POST request body.

As described in "Webhooks Object Properties", webhook creation entails a test POST request to the URL given as the _target_ value. If this request does not receive an HTTP 200 response, your request to the Webhook API will fail with HTTP 400, and the webhook will not be created. If created successfully, the webhook will begin to receive event data after 1 minute.

+ Request (application/json)

  + Headers
      Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

  + Body

    ```js
    {
      "name": "Example webhook",
      "target": "http://client.example.com/example-webhook",
      "auth_type": "oauth2",
      "auth_request_details": {
        "url": "http://client.example.com/tokens",
        "body": {
            "client_id": "CLIENT123",
            "client_secret": "9sdfj791d2bsbf",
            "grant_type": "client_credentials"
        }
      },
      "auth_token": "",
      "events": [
        "delivery",
        "injection",
        "open",
        "click"
      ]
    }
    ```

+ Response 200 (application/json)

    ```js
    {
      "results": {
        "id": "12affc24-f183-11e3-9234-3c15c2c818c2",
        "links": [
          {
            "href": "http://www.messagesystems-api-url.com/api/v1/webhooks/12affc24-f183-11e3-9234-3c15c2c818c2",
            "rel": "urn.msys.webhooks.webhook",
            "method": ["GET","PUT"]
          }
        ]
      }
    }
    ```

+ Response 400 (application/json)

    ```js
    {
      "errors": {
        "code": 400,
        "message": "POST to webhook tokens URL failed"
      }
    }
    ```

## Retrieve [/webhooks/{id}{?timezone}]

+ Model

    + Body

        ```js
          {
            "results": {
              "name": "Example webhook",
              "target": "http://client.example.com/example-webhook",
              "events": [
                "delivery",
                "injection",
                "open",
                "click"
              ],
              "auth_type": "oauth2",
              "auth_request_details": {
                "url": "https://oauth.myurl.com/tokens",
                "body": {
                  "client_id": "<oauth client id>",
                  "client_secret": "<oauth client secret>"
                }
              },
              "auth_credentials": {
                "access_token": "<oauth token>",
                "expires_in": 3600
              },
              "auth_token": "",
              "links": [
                {
                  "href": "http://www.messagesystems-api-url.com/api/v1/webhooks/12affc24-f183-11e3-9234-3c15c2c818c2/validate",
                  "rel": "urn.msys.webhooks.validate",
                  "method": ["POST"]
                },
                {
                  "href": "http://www.messagesystems-api-url.com/api/v1/webhooks/12affc24-f183-11e3-9234-3c15c2c818c2/batch-status",
                  "rel": "urn.msys.webhooks.batches",
                  "method": ["GET"]
                }
              ]
            }
          }
        ```

### Retrieve Webhook Details [GET]

Retrieve details about a webhook by specifying its id in the URI path.

+ Parameters
  + id (required, uuid, `12affc24-f183-11e3-9234-3c15c2c818c2`) ... UUID identifying a webhook
  + timezone =`UTC` (optional, string, `America/New_York`) ... Standard timezone identification string, defaults to `UTC`

+ Request

  + Headers
      Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
      Accept: application/json

+ Response 200 (application/json)

    [Retrieve][]

## List [/webhooks{?timezone}]

+ Model

    + Body

        ```js
        {
          "results": [
            {
              "id": "12affc24-f183-11e3-9234-3c15c2c818c2",
              "name": "Example webhook",
              "target": "http://client.example.com/example-webhook",
              "events": [
                "delivery",
                "injection",
                "open",
                "click"
              ],
              "auth_type": "oauth2",
              "auth_request_details": {
                "url": "https://oauth.myurl.com/tokens",
                "body": {
                  "client_id": "<oauth client id>",
                  "client_secret": "<oauth client secret>"
                }
              },
              "auth_credentials": {
                "access_token": "<oauth token>",
                "expires_in": 3600
              },
              "auth_token": "",
              "last_successful": "2014-07-01 16:09:15",
              "last_failure": "2014-08-01 15:15:45",
              "links": [
                {
                  "href": "http://www.messagesystems-api-url.com/api/v1/webhooks/a2b83490-10df-11e4-b670-c1ffa86371ff",
                  "rel": "urn.msys.webhooks.webhook",
                  "method": ["GET","PUT"]
                }
              ]
            },
            {
              "id": "123456-abcd-efgh-7890-123445566778",
              "name": "Another webhook",
              "target": "http://client.example.com/another-example",
              "events": [
                "generation_rejection",
                "generation_failure"
              ],
              "auth_type": "none",
              "auth_request_details": {},
              "auth_credentials": {},
              "auth_token": "5ebe2294ecd0e0f08eab7690d2a6ee69",
              "links": [
                {
                  "href": "http://www.messagesystems-api-url.com/api/v1/webhooks/123456-abcd-efgh-7890-123445566778",
                  "rel": "urn.msys.webhooks.webhook",
                  "method": ["GET","PUT"]
                }
              ]
            }
          ]
        }
        ```

### List all Webhooks [GET]

List currently extant webhooks.

+ Parameters
  + timezone =`UTC` (optional, string, `America/New_York`) ... Standard timezone identification string, defaults to `UTC`

+ Request

  + Headers
      Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
      Accept: application/json

+ Response 200 (application/json)

  [List][]


## Update and Delete [/webhooks/{id}]

### Update a Webhook [PUT]

Update a webhook's properties by specifying its id in the URI path and use a **webhooks object** as
the PUT request body.

Note that batches currently queued for delivery to this webhook will not be affected by these
modifications.  For example, if you change the webhook's target URL, batches already queued for delivery will still be POSTed to the previous URL.

As described in "Webhooks Object Properties", a change to the _target_ value entails a test POST request to the URL given. If this request does not receive an HTTP 200 response, your request to the Webhooks API will fail with HTTP 400, and the webhook will not be modified.

+ Parameters
  + id (required, uuid, `12affc24-f183-11e3-9234-3c15c2c818c2`) ... UUID identifying a webhook

+ Request (application/json)

  + Headers
      Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

  + Body

    ```js
    {
      "name": "Renamed webhook",
      "events": [
        "rejection",
        "delay"
      ],
      "auth_type": "none"
    }
    ```

+ Response 200 (application/json)

    ```js
    {
      "results": {
        "id": "12affc24-f183-11e3-9234-3c15c2c818c2",
        "links": [
          {
            "href": "http://www.messagesystems-api-url.com/api/v1/webhooks/12affc24-f183-11e3-9234-3c15c2c818c2/validate",
            "rel": "urn.msys.webhooks.validate",
            "method": ["POST"]
          }
        ]
      }
    }
    ```

### Delete a Webhook [DELETE]

Delete a webhook from the system by specifying its id in the URI path.  The system will stop pushing data to the target URL after the batches currently queued to be
delivered are drained.

+ Parameters
  + id (required, uuid, `12affc24-f183-11e3-9234-3c15c2c818c2`) ... UUID identifying a webhook

+ Request

  + Headers
      Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

+ Response 204

## Validate [/webhooks/{id}/validate]

### Validate a Webhook [POST]

The validation sends an example message event batch from the Webhooks API to the
target URL, validates that the target responds with HTTP 200,
and returns detailed information on the response received from the target.

#### Message Properties

| Property   | Type   | Description | Required | Notes |
|------------|--------|-------------|----------|-------|
| message    | object | Example batch to send | yes | example: `{"msys": {}}`  |

+ Parameters
  + id (required, uuid, `12affc24-f183-11e3-9234-3c15c2c818c2`) ... UUID identifying a webhook

+ Request (application/json)

  + Headers
      Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

  + Body

    ```js
    {
        "message": {
            "msys": {}
        }
    }
    ```

+ Response 200 (application/json)

    ```js
    {
      "results": {
        "msg": "Test POST to endpoint succeeded",
        "response": {
          "status": 200,
          "headers": {
            "Content-Type": "text/plain"
          },
          "body": "OK"
        }
      }
    }
    ```

## Batch Status [/webhooks/{id}/batch-status{?limit}]

### Retrieve Status Information [GET]

Retrieve status information regarding batches that have been generated
for the given webhook by specifying its id in the URI path. Status information includes the successes of batches
that previously failed to reach the webhook's target URL and batches that
are currently in a failed state.

+ Parameters
  + id (required, uuid, `12affc24-f183-11e3-9234-3c15c2c818c2`) ... UUID identifying a webhook
  + limit (optional, int, `1000`) ... Maximum number of results to return. Defaults to `1000`.

+ Request

  + Headers
      Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
      Accept: application/json

+ Response 200 (application/json)

    ```js
    {
      "results": [
        {
          "batch_id": "032d330540298f54f0e8bcc1373f3cfd",
          "ts": "2014-07-30T21:38:08.000Z",
          "attempts": 7,
          "response_code": 200
        },
        {
          "batch_id": "13c6764994a8f6b4e29906d5712ca7d",
          "ts": "2014-07-30T20:38:08.000Z",
          "attempts": 2,
          "response_code": 400
        }
      ]
    }
    ```

# Group SMTP API
<a name="smtp-api"></a>

Through use of the X-MSYS-API header in a message sent to SparkPost and SparkPost Elite through SMTP,
you can now specify a campaign id, metadata,
tags, Cc, Bcc, and archive recipient lists and enable open and/or click tracking.  Note that to use this option you should be familiar with how to encode
options as JSON strings, as the value of the header field is a JSON object that specifies the relevant options:

```
X-MSYS-API: {"options" : {"open_tracking" : false, "click_tracking" : true},
   "metadata" : {"key" : "value"}, "tags" : ["cat", "dog"], "campaign_id" :
   "my_campaign"}
```

The fields supported in the X-MSYS-API header are as follows:

| Field | Type | Description | Required | Notes |
|-------|------|-------------|----------|-------|
| campaign_id | string | Name of the campaign to associate with the SMTP message | no | Maximum length - 64 bytes (same restriction as the REST API) |
| metadata | JSON object | JSON key value pairs associated with the SMTP message | no | A maximum of 1000 bytes of metadata is available in click/open events. |
| cc | JSON array | Array of recipient addresses that will be included in the "Cc" header | no | A unique message with a unique tracking URL will be generated for each recipient in this list. |
| bcc | JSON array | Array of recipient addresses that will be hidden from all other recipients | no | A unique message with a unique tracking URL will be generated for each recipient in this list. |
| archive | JSON array | Array of recipient addresses that will be hidden from all other recipients | no | A unique message will be generated for each recipient in this list. The archive copy of the message contains tracking URLs identical to the recipient. For a full description, see the "What is an archive recipient?" section.|
| tags | JSON array | Array of text labels associated with the SMTP message | no | Tags are available in click/open events. Maximum number of tags is 10 per recipient, 100 system wide. |
| options | JSON object | JSON object in which SMTP API options are defined | no | For a full description, see the Options Attributes. |

## Options Attributes

| Field | Type | Description | Required | Notes |
|-------|------|-------------|----------|-------|
| open_tracking | boolean | Whether open tracking is enabled for this SMTP message | no | Defaults to false. |
| click_tracking | boolean | Whether click tracking is enabled for this SMTP message | no | Defaults to false. |
| transactional | boolean | Whether message is transactional or non-transactional for unsubscribe and suppression purposes | no | Defaults to false. |
| sandbox| boolean| Whether or not to use the sandbox sending domain ( **Note:** SparkPost only ) | no | Defaults to false. |
| skip_suppression| boolean| Whether or not to ignore customer suppression rules, for this SMTP message only. Only applicable if your configuration supports this parameter. ( **Note:** SparkPost Elite only )| no | Defaults to false. |

## Sending Messages with cc, bcc, and archive Recipients

When submitting an email via SMTP that includes the X-MSYS-API header, you may specify a JSON array for cc, bcc, and archive lists.  For each address in each of these arrays, a message will be generated. Messages will be generated with the following headers: 
* It is the responsibility of the user to include their own "To" header in the body of the message.
* All messages will display the "Cc" header and the value of that header will include all addresses listed in the "cc" array.
* The "bcc" recipients will each receive a message with the "To" and "Cc" headers described above and, additionally, will see a "Bcc" header with ONLY their own recipient address as the value of the header.
* The "archive" recipients will each receive a message with the "To" and "Cc" headers described above however, they will not have a "Bcc" header.

The following are key points about reporting and tracking for cc, bcc, and archive messages:
* Each recipient (To, Cc, Bcc, and archive) is counted as a targeted message.
* A "rcpt_type" field is available during events through the Webhooks, which designates if the message was a Cc, Bcc, or archive copy.
* A "transmission_id" field is available during events through the Webhooks, which can be used to correlate the Cc, Bcc, and archive versions of the messages to one another.

**What is an archive recipient?**

Recipients in the "archive" list will receive an exact replica of the message that was sent to the RCPT TO address. In particular, any encoded links intended for the RCPT TO recipient will appear _as is_ in the archive messages.  In contrast, recipients in the "bcc" list will have links encoded specific to their address. (There will be some differences in headers such as X-MSFBL or List-Unsubscribe headers.)

For example:

```
X-MSYS-API: {

   "cc" : [ "cc_email1@corp.com", "cc_email2@corp.com" ], 
   "bcc" : [ "bcc_email1@corp.com", "bcc_email2@corp.com" ], 
   "archive" : [ "archive_email@corp.com" ], 

   "options" : {"open_tracking" : false, "click_tracking" : true},
}
```
You may not specify more than a total of 1000 total recipients in those 3 lists.

You may also specify name and email keys in the "cc" and "bcc" JSON arrays in order to produce a friendly "Cc" or "Bcc" header. For example:

```
X-MSYS-API: {
   "cc" : [
    {
    "email" : "cc_recip_1@gmail.com",
    "name" : "CC 1"
    },
    {
    "email" : "cc_recip_2@gmail.com",
    "name" : "CC 2"
    }
  ]

  "bcc" : [
    {
    "email" : "bcc_recip_1@gmail.com",
    "name" : "BCC 1"
    }
  ]
}
```

## Comments on Header Length

SMTP defines a maximum line length of 1000 characters (including CRLF).  If the value of the X-MSYS-API JSON string is
longer than 998 characters, it will need to be folded across multiple lines before the message is injected.  An example
of a folded header:

```
X-MSYS-API: {"options" : {"open_tracking" : false, "click_tracking" : true},
   "metadata" : {"key" : "value"}, "tags" : ["cat", "dog"], "campaign_id" :
   "my_campaign"}
```

Be aware that when the header is unfolded on the receiving system, as per rfc2822 (https://www.ietf.org/rfc/rfc2822.txt),
a single space will be added between each line of the header.

For example:

```
X-MSYS-API: {"options" : {"open_tracking" : false }, "campaign_id" : "my_awes
   ome_campaign" }
```

Will be unfolded as

```
X-MSYS-API: {"options" : {"open_tracking" : false }, "campaign_id" : "my_awes ome_campaign" }
```

Note the space that was introduced in the "my_awes ome_campaign" string.
